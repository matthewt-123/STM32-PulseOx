
PulseOx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004290  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004460  08004460  00005460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c0  080044c0  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044c8  080044c8  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c8  080044c8  000054c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080044d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000064  08004534  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08004534  00006324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edec  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002189  00000000  00000000  00014e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00017010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae5  00000000  00000000  00017df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d9e  00000000  00000000  000188d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114a2  00000000  00000000  0003c673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df87d  00000000  00000000  0004db15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d392  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fdc  00000000  00000000  0012d3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001313b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004448 	.word	0x08004448

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08004448 	.word	0x08004448

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fd86 	bl	80010c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f82c 	bl	8000614 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9b0 	bl	8000920 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f984 	bl	80008cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005c4:	f000 f894 	bl	80006f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005c8:	f000 f8e4 	bl	8000794 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005cc:	f000 f932 	bl	8000834 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // Start Timer3 (Trigger Source For ADC1)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <main+0x58>)
 80005d2:	f002 fb87 	bl	8002ce4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1); // Start ADC Conversion
 80005d6:	480d      	ldr	r0, [pc, #52]	@ (800060c <main+0x5c>)
 80005d8:	f000 fe2a 	bl	8001230 <HAL_ADC_Start_IT>
  HAL_GPIO_WritePin(GPIOC, RED_LED_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2102      	movs	r1, #2
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <main+0x60>)
 80005e2:	f001 fd13 	bl	800200c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, IR_LED_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2101      	movs	r1, #1
 80005ea:	4809      	ldr	r0, [pc, #36]	@ (8000610 <main+0x60>)
 80005ec:	f001 fd0e 	bl	800200c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  int delayTime = 17;
//  	int delayTime = 250;
	HAL_GPIO_WritePin(GPIOC, RED_LED_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2102      	movs	r1, #2
 80005f4:	4806      	ldr	r0, [pc, #24]	@ (8000610 <main+0x60>)
 80005f6:	f001 fd09 	bl	800200c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, IR_LED_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	4804      	ldr	r0, [pc, #16]	@ (8000610 <main+0x60>)
 8000600:	f001 fd04 	bl	800200c <HAL_GPIO_WritePin>
 while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <main+0x54>
 8000608:	20000110 	.word	0x20000110
 800060c:	20000080 	.word	0x20000080
 8000610:	40020800 	.word	0x40020800

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2234      	movs	r2, #52	@ 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fa90 	bl	8003b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <SystemClock_Config+0xd4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <SystemClock_Config+0xd4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <SystemClock_Config+0xd4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000654:	2300      	movs	r3, #0
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4b24      	ldr	r3, [pc, #144]	@ (80006ec <SystemClock_Config+0xd8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000660:	4a22      	ldr	r2, [pc, #136]	@ (80006ec <SystemClock_Config+0xd8>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <SystemClock_Config+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 88;
 800068c:	2358      	movs	r3, #88	@ 0x58
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000698:	2302      	movs	r3, #2
 800069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 f831 	bl	8002708 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006ac:	f000 fb66 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80006c2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80006c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fcd0 	bl	8002074 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006da:	f000 fb4f 	bl	8000d7c <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	@ 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000702:	4b22      	ldr	r3, [pc, #136]	@ (800078c <MX_ADC1_Init+0x9c>)
 8000704:	4a22      	ldr	r2, [pc, #136]	@ (8000790 <MX_ADC1_Init+0xa0>)
 8000706:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000708:	4b20      	ldr	r3, [pc, #128]	@ (800078c <MX_ADC1_Init+0x9c>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_ADC1_Init+0x9c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000714:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_ADC1_Init+0x9c>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_ADC1_Init+0x9c>)
 800071c:	2200      	movs	r2, #0
 800071e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_ADC1_Init+0x9c>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_ADC1_Init+0x9c>)
 800072a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_ADC1_Init+0x9c>)
 8000732:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000736:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_ADC1_Init+0x9c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_ADC1_Init+0x9c>)
 8000740:	2201      	movs	r2, #1
 8000742:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_ADC1_Init+0x9c>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_ADC1_Init+0x9c>)
 800074e:	2201      	movs	r2, #1
 8000750:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000752:	480e      	ldr	r0, [pc, #56]	@ (800078c <MX_ADC1_Init+0x9c>)
 8000754:	f000 fd28 	bl	80011a8 <HAL_ADC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800075e:	f000 fb0d 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	@ (800078c <MX_ADC1_Init+0x9c>)
 8000774:	f000 ff6c 	bl	8001650 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800077e:	f000 fafd 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000080 	.word	0x20000080
 8000790:	40012000 	.word	0x40012000

08000794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_TIM1_Init+0x98>)
 80007b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000830 <MX_TIM1_Init+0x9c>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <MX_TIM1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_TIM1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_TIM1_Init+0x98>)
 80007c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_TIM1_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d0:	4b16      	ldr	r3, [pc, #88]	@ (800082c <MX_TIM1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_TIM1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007dc:	4813      	ldr	r0, [pc, #76]	@ (800082c <MX_TIM1_Init+0x98>)
 80007de:	f002 fa31 	bl	8002c44 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007e8:	f000 fac8 	bl	8000d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <MX_TIM1_Init+0x98>)
 80007fa:	f002 fadb 	bl	8002db4 <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000804:	f000 faba 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_TIM1_Init+0x98>)
 8000816:	f002 fcdb 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000820:	f000 faac 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000c8 	.word	0x200000c8
 8000830:	40010000 	.word	0x40010000

08000834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000850:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_TIM2_Init+0x94>)
 8000852:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <MX_TIM2_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_TIM2_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42967;
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_TIM2_Init+0x94>)
 8000866:	f24a 72d7 	movw	r2, #42967	@ 0xa7d7
 800086a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_TIM2_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_TIM2_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000878:	4813      	ldr	r0, [pc, #76]	@ (80008c8 <MX_TIM2_Init+0x94>)
 800087a:	f002 f9e3 	bl	8002c44 <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000884:	f000 fa7a 	bl	8000d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_TIM2_Init+0x94>)
 8000896:	f002 fa8d 	bl	8002db4 <HAL_TIM_ConfigClockSource>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008a0:	f000 fa6c 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008a4:	2320      	movs	r3, #32
 80008a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_TIM2_Init+0x94>)
 80008b2:	f002 fc8d 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008bc:	f000 fa5e 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000110 	.word	0x20000110

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	@ (800091c <MX_USART2_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 8000904:	f002 fce0 	bl	80032c8 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 fa35 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000158 	.word	0x20000158
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b37      	ldr	r3, [pc, #220]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a36      	ldr	r2, [pc, #216]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b34      	ldr	r3, [pc, #208]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a28      	ldr	r2, [pc, #160]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a21      	ldr	r2, [pc, #132]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IR_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2103      	movs	r1, #3
 80009aa:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_GPIO_Init+0xfc>)
 80009ac:	f001 fb2e 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <MX_GPIO_Init+0x100>)
 80009b6:	f001 fb29 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <MX_GPIO_Init+0xfc>)
 80009d2:	f001 f987 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = IR_LED_Pin|RED_LED_Pin;
 80009d6:	2303      	movs	r3, #3
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	480b      	ldr	r0, [pc, #44]	@ (8000a1c <MX_GPIO_Init+0xfc>)
 80009ee:	f001 f979 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009f2:	2320      	movs	r3, #32
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_GPIO_Init+0x100>)
 8000a0a:	f001 f96b 	bl	8001ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	@ 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	tick = HAL_GetTick();
 8000a2c:	f000 fbb0 	bl	8001190 <HAL_GetTick>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a1e      	ldr	r2, [pc, #120]	@ (8000aac <HAL_ADC_ConvCpltCallback+0x88>)
 8000a34:	6013      	str	r3, [r2, #0]
	AdcVal = HAL_ADC_GetValue(&hadc1);
 8000a36:	481e      	ldr	r0, [pc, #120]	@ (8000ab0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000a38:	f000 fde8 	bl	800160c <HAL_ADC_GetValue>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <HAL_ADC_ConvCpltCallback+0x90>)
 8000a42:	801a      	strh	r2, [r3, #0]
//	{
//		HAL_GPIO_WritePin(GPIOC, RED_LED_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOC, IR_LED_Pin, GPIO_PIN_SET);
//		RedLEDActive = false;
//	}
	if (RedLEDActive)
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d02b      	beq.n	8000aa4 <HAL_ADC_ConvCpltCallback+0x80>
	{
		alpha = 0.06;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <HAL_ADC_ConvCpltCallback+0x98>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000a50:	601a      	str	r2, [r3, #0]
		//EMA Filter
		prev_RedVal = alpha * (float32_t)AdcVal + (1.0f-alpha) * prev_RedVal;
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_ADC_ConvCpltCallback+0x90>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <HAL_ADC_ConvCpltCallback+0x98>)
 8000a60:	edd3 7a00 	vldr	s15, [r3]
 8000a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <HAL_ADC_ConvCpltCallback+0x98>)
 8000a6a:	edd3 7a00 	vldr	s15, [r3]
 8000a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a72:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000a78:	edd3 7a00 	vldr	s15, [r3]
 8000a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000a86:	edc3 7a00 	vstr	s15, [r3]
		updateMaxMin(&redMax, &redMin, prev_RedVal);
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	eeb0 0a67 	vmov.f32	s0, s15
 8000a94:	490c      	ldr	r1, [pc, #48]	@ (8000ac8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000a96:	480d      	ldr	r0, [pc, #52]	@ (8000acc <HAL_ADC_ConvCpltCallback+0xa8>)
 8000a98:	f000 f81a 	bl	8000ad0 <updateMaxMin>
		peakFinder();
 8000a9c:	f000 f8a6 	bl	8000bec <peakFinder>
		transmitData();
 8000aa0:	f000 f916 	bl	8000cd0 <transmitData>
////		HAL_GPIO_WritePin(GPIOC, RED_LED_Pin, GPIO_PIN_RESET);
////		HAL_GPIO_WritePin(GPIOC, IR_LED_Pin, GPIO_PIN_SET);
//	}
//	counter++;

}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001cc 	.word	0x200001cc
 8000ab0:	20000080 	.word	0x20000080
 8000ab4:	200001d0 	.word	0x200001d0
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	3d75c28f 	.word	0x3d75c28f
 8000ac4:	200001a4 	.word	0x200001a4
 8000ac8:	200001c4 	.word	0x200001c4
 8000acc:	200001bc 	.word	0x200001bc

08000ad0 <updateMaxMin>:
 * Inputs: Max, Min, Current Value
 * Outputs: None
 * Update min/max for Red and IR readings in the last 4 seconds
 **************************************************************/
void updateMaxMin(struct timeValue *max, struct timeValue *min, float prev_val)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	ed87 0a01 	vstr	s0, [r7, #4]
	if (prev_val > max->value || tick > max->timestamp + 1000 * 4) {max->value = prev_val; max->timestamp = tick;}
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aea:	ed97 7a01 	vldr	s14, [r7, #4]
 8000aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af6:	dc07      	bgt.n	8000b08 <updateMaxMin+0x38>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f503 627a 	add.w	r2, r3, #4000	@ 0xfa0
 8000b00:	4b37      	ldr	r3, [pc, #220]	@ (8000be0 <updateMaxMin+0x110>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d20c      	bcs.n	8000b22 <updateMaxMin+0x52>
 8000b08:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b10:	ee17 2a90 	vmov	r2, s15
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	4b31      	ldr	r3, [pc, #196]	@ (8000be0 <updateMaxMin+0x110>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	e020      	b.n	8000b64 <updateMaxMin+0x94>
	else if (prev_val < min->value || tick > min->timestamp + 1000 * 4) {min->value = prev_val; min->timestamp = tick;}
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	ee07 3a90 	vmov	s15, r3
 8000b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3a:	d407      	bmi.n	8000b4c <updateMaxMin+0x7c>
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f503 627a 	add.w	r2, r3, #4000	@ 0xfa0
 8000b44:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <updateMaxMin+0x110>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d20b      	bcs.n	8000b64 <updateMaxMin+0x94>
 8000b4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b54:	ee17 2a90 	vmov	r2, s15
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <updateMaxMin+0x110>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	605a      	str	r2, [r3, #4]
	if (max->value - min->value > (redMax.value - redMin.value - 1) && tick > 10)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	1ad2      	subs	r2, r2, r3
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <updateMaxMin+0x114>)
 8000b70:	6819      	ldr	r1, [r3, #0]
 8000b72:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <updateMaxMin+0x118>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	1acb      	subs	r3, r1, r3
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d92a      	bls.n	8000bd4 <updateMaxMin+0x104>
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <updateMaxMin+0x110>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b0a      	cmp	r3, #10
 8000b84:	d926      	bls.n	8000bd4 <updateMaxMin+0x104>
	{
		//update threshhold window
		if (max->timestamp > min->timestamp)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d910      	bls.n	8000bb4 <updateMaxMin+0xe4>
		{
			min->value = max->value - (redMax.value - redMin.value - 1);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <updateMaxMin+0x118>)
 8000b98:	6819      	ldr	r1, [r3, #0]
 8000b9a:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <updateMaxMin+0x114>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1acb      	subs	r3, r1, r3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	601a      	str	r2, [r3, #0]
			min->timestamp = max->timestamp - 1;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	605a      	str	r2, [r3, #4]
		{
			max->value = min->value + (redMax.value - redMin.value - 1);
			max->timestamp = min->timestamp - 1;
		}
	}
}
 8000bb2:	e00f      	b.n	8000bd4 <updateMaxMin+0x104>
			max->value = min->value + (redMax.value - redMin.value - 1);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <updateMaxMin+0x114>)
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <updateMaxMin+0x118>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	1acb      	subs	r3, r1, r3
 8000bc2:	4413      	add	r3, r2
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	601a      	str	r2, [r3, #0]
			max->timestamp = min->timestamp - 1;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	1e5a      	subs	r2, r3, #1
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	605a      	str	r2, [r3, #4]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	200001cc 	.word	0x200001cc
 8000be4:	200001bc 	.word	0x200001bc
 8000be8:	200001c4 	.word	0x200001c4

08000bec <peakFinder>:
 * Find peak if Red LED value is within 8 arbitrary units of min
 * 0.5 seconds between peaks at minimum, and value needs to be gte
 * 	than surrounding ones
 **************************************************************/
void peakFinder()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	if (lastRead.value > redMax.value - redMin.value - 1
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <peakFinder+0xbc>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <peakFinder+0xc0>)
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <peakFinder+0xc4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	1acb      	subs	r3, r1, r3
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d93c      	bls.n	8000c7e <peakFinder+0x92>
			&& lastRead.value >= prev_RedVal
 8000c04:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <peakFinder+0xbc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c10:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <peakFinder+0xc8>)
 8000c12:	edd3 7a00 	vldr	s15, [r3]
 8000c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1e:	db2e      	blt.n	8000c7e <peakFinder+0x92>
			&& lastRead.value >= lastLastRead.value
 8000c20:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <peakFinder+0xbc>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b24      	ldr	r3, [pc, #144]	@ (8000cb8 <peakFinder+0xcc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d328      	bcc.n	8000c7e <peakFinder+0x92>
			&& lastRead.timestamp - lastPeak > 500)
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca8 <peakFinder+0xbc>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <peakFinder+0xd0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c3a:	d920      	bls.n	8000c7e <peakFinder+0x92>
	{
		//is peak
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	4820      	ldr	r0, [pc, #128]	@ (8000cc0 <peakFinder+0xd4>)
 8000c40:	f001 f9fd 	bl	800203e <HAL_GPIO_TogglePin>
		pulse = (60.0f * 1000.0f / ((float)lastRead.timestamp - (float)lastPeak));
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <peakFinder+0xbc>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	ee07 3a90 	vmov	s15, r3
 8000c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <peakFinder+0xd0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c60:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000cc4 <peakFinder+0xd8>
 8000c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c6c:	ee17 3a90 	vmov	r3, s15
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <peakFinder+0xdc>)
 8000c74:	801a      	strh	r2, [r3, #0]
		lastPeak = lastRead.timestamp;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <peakFinder+0xbc>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4a10      	ldr	r2, [pc, #64]	@ (8000cbc <peakFinder+0xd0>)
 8000c7c:	6013      	str	r3, [r2, #0]
	}
	//shift all vals back
	lastLastRead = lastRead;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <peakFinder+0xcc>)
 8000c80:	4a09      	ldr	r2, [pc, #36]	@ (8000ca8 <peakFinder+0xbc>)
 8000c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c86:	e883 0003 	stmia.w	r3, {r0, r1}
	lastRead.value = prev_RedVal;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <peakFinder+0xc8>)
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c94:	ee17 2a90 	vmov	r2, s15
 8000c98:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <peakFinder+0xbc>)
 8000c9a:	601a      	str	r2, [r3, #0]
	lastRead.timestamp = tick;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <peakFinder+0xe0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a01      	ldr	r2, [pc, #4]	@ (8000ca8 <peakFinder+0xbc>)
 8000ca2:	6053      	str	r3, [r2, #4]
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200001a8 	.word	0x200001a8
 8000cac:	200001bc 	.word	0x200001bc
 8000cb0:	200001c4 	.word	0x200001c4
 8000cb4:	200001a4 	.word	0x200001a4
 8000cb8:	200001b0 	.word	0x200001b0
 8000cbc:	200001b8 	.word	0x200001b8
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	476a6000 	.word	0x476a6000
 8000cc8:	200001a0 	.word	0x200001a0
 8000ccc:	200001cc 	.word	0x200001cc

08000cd0 <transmitData>:
 * Function: transmitData()
 * Inputs/Outputs: None
 * Transmit data in form: time, redLED, IRLED, Pulse, Blood Ox
 **************************************************************/
void transmitData()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
	//transmit time for analysis
	char timeBuf[10];
	snprintf(timeBuf, sizeof(timeBuf), "%lu,", tick);
 8000cd6:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <transmitData+0x90>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f107 000c 	add.w	r0, r7, #12
 8000cde:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <transmitData+0x94>)
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	f002 fefd 	bl	8003ae0 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)timeBuf, strlen(timeBuf), HAL_MAX_DELAY);
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fa90 	bl	8000210 <strlen>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	f107 010c 	add.w	r1, r7, #12
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfc:	481a      	ldr	r0, [pc, #104]	@ (8000d68 <transmitData+0x98>)
 8000cfe:	f002 fb33 	bl	8003368 <HAL_UART_Transmit>

	//transmit red LED data
	char buffer[10];
	snprintf(buffer, sizeof(buffer), "%u,", (int)prev_RedVal);
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <transmitData+0x9c>)
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d0c:	4638      	mov	r0, r7
 8000d0e:	ee17 3a90 	vmov	r3, s15
 8000d12:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <transmitData+0xa0>)
 8000d14:	210a      	movs	r1, #10
 8000d16:	f002 fee3 	bl	8003ae0 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fa77 	bl	8000210 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4639      	mov	r1, r7
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <transmitData+0x98>)
 8000d2e:	f002 fb1b 	bl	8003368 <HAL_UART_Transmit>

	//transmit original data
	snprintf(buffer, sizeof(buffer), "%u\r\n", (int)AdcVal);
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <transmitData+0xa4>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	4638      	mov	r0, r7
 8000d38:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <transmitData+0xa8>)
 8000d3a:	210a      	movs	r1, #10
 8000d3c:	f002 fed0 	bl	8003ae0 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d40:	463b      	mov	r3, r7
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa64 	bl	8000210 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <transmitData+0x98>)
 8000d54:	f002 fb08 	bl	8003368 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (uint8_t*)pulseBuf, strlen(pulseBuf), HAL_MAX_DELAY);
//
//	//transmit Blood Ox data
//	snprintf(buffer, sizeof(buffer), "%u\r\n", (int)bloodOx);
//	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200001cc 	.word	0x200001cc
 8000d64:	08004460 	.word	0x08004460
 8000d68:	20000158 	.word	0x20000158
 8000d6c:	200001a4 	.word	0x200001a4
 8000d70:	08004468 	.word	0x08004468
 8000d74:	200001d0 	.word	0x200001d0
 8000d78:	0800446c 	.word	0x0800446c

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <Error_Handler+0x8>

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dc6:	2007      	movs	r0, #7
 8000dc8:	f000 ff4a 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <HAL_ADC_MspInit+0x8c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12f      	bne.n	8000e5a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <HAL_ADC_MspInit+0x90>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <HAL_ADC_MspInit+0x90>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <HAL_ADC_MspInit+0x90>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <HAL_ADC_MspInit+0x90>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <HAL_ADC_MspInit+0x90>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <HAL_ADC_MspInit+0x90>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e32:	2301      	movs	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <HAL_ADC_MspInit+0x94>)
 8000e46:	f000 ff4d 	bl	8001ce4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2012      	movs	r0, #18
 8000e50:	f000 ff11 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e54:	2012      	movs	r0, #18
 8000e56:	f000 ff2a 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	@ 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40012000 	.word	0x40012000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000

08000e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a15      	ldr	r2, [pc, #84]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x64>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10e      	bne.n	8000ea0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x68>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	4a13      	ldr	r2, [pc, #76]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x68>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x68>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e9e:	e012      	b.n	8000ec6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ea8:	d10d      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x68>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x68>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x68>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40010000 	.word	0x40010000
 8000ed8:	40023800 	.word	0x40023800

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	@ (8000f60 <HAL_UART_MspInit+0x84>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12b      	bne.n	8000f56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <HAL_UART_MspInit+0x88>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a17      	ldr	r2, [pc, #92]	@ (8000f64 <HAL_UART_MspInit+0x88>)
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <HAL_UART_MspInit+0x88>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <HAL_UART_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <HAL_UART_MspInit+0x88>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_UART_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f36:	230c      	movs	r3, #12
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f46:	2307      	movs	r3, #7
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <HAL_UART_MspInit+0x8c>)
 8000f52:	f000 fec7 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	@ 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40004400 	.word	0x40004400
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <MemManage_Handler+0x4>

08000f84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 f8d1 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <ADC_IRQHandler+0x10>)
 8000fd2:	f000 fa0b 	bl	80013ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000080 	.word	0x20000080

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f002 fda2 	bl	8003b58 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	200001d4 	.word	0x200001d4
 8001048:	20000328 	.word	0x20000328

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001074:	f7ff ffea 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800109e:	f002 fd61 	bl	8003b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fa85 	bl	80005b0 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010b4:	080044d0 	.word	0x080044d0
  ldr r2, =_sbss
 80010b8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010bc:	20000324 	.word	0x20000324

080010c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <CAN1_RX0_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 fdb7 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fe46 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fdcf 	bl	8001cca <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 fd97 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	@ (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000008 	.word	0x20000008
 8001160:	20000010 	.word	0x20000010
 8001164:	2000000c 	.word	0x2000000c

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	@ (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000010 	.word	0x20000010
 800118c:	200001d8 	.word	0x200001d8

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200001d8 	.word	0x200001d8

080011a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e033      	b.n	8001226 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fe06 	bl	8000dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011ee:	f023 0302 	bic.w	r3, r3, #2
 80011f2:	f043 0202 	orr.w	r2, r3, #2
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fb5a 	bl	80018b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f023 0303 	bic.w	r3, r3, #3
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	@ 0x40
 8001216:	e001      	b.n	800121c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_ADC_Start_IT+0x1a>
 8001246:	2302      	movs	r3, #2
 8001248:	e0bd      	b.n	80013c6 <HAL_ADC_Start_IT+0x196>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b01      	cmp	r3, #1
 800125e:	d018      	beq.n	8001292 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001270:	4b58      	ldr	r3, [pc, #352]	@ (80013d4 <HAL_ADC_Start_IT+0x1a4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a58      	ldr	r2, [pc, #352]	@ (80013d8 <HAL_ADC_Start_IT+0x1a8>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9a      	lsrs	r2, r3, #18
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001284:	e002      	b.n	800128c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3b01      	subs	r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f9      	bne.n	8001286 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	f040 8085 	bne.w	80013ac <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012e0:	d106      	bne.n	80012f0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	f023 0206 	bic.w	r2, r3, #6
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80012ee:	e002      	b.n	80012f6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fe:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <HAL_ADC_Start_IT+0x1ac>)
 8001300:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800130a:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	2b00      	cmp	r3, #0
 800132a:	d12a      	bne.n	8001382 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a2b      	ldr	r2, [pc, #172]	@ (80013e0 <HAL_ADC_Start_IT+0x1b0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d015      	beq.n	8001362 <HAL_ADC_Start_IT+0x132>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a2a      	ldr	r2, [pc, #168]	@ (80013e4 <HAL_ADC_Start_IT+0x1b4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d105      	bne.n	800134c <HAL_ADC_Start_IT+0x11c>
 8001340:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <HAL_ADC_Start_IT+0x1ac>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00a      	beq.n	8001362 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a25      	ldr	r2, [pc, #148]	@ (80013e8 <HAL_ADC_Start_IT+0x1b8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d136      	bne.n	80013c4 <HAL_ADC_Start_IT+0x194>
 8001356:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <HAL_ADC_Start_IT+0x1ac>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	d130      	bne.n	80013c4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d129      	bne.n	80013c4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	e020      	b.n	80013c4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <HAL_ADC_Start_IT+0x1b0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d11b      	bne.n	80013c4 <HAL_ADC_Start_IT+0x194>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d114      	bne.n	80013c4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	e00b      	b.n	80013c4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	f043 0210 	orr.w	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	40012300 	.word	0x40012300
 80013e0:	40012000 	.word	0x40012000
 80013e4:	40012100 	.word	0x40012100
 80013e8:	40012200 	.word	0x40012200

080013ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d049      	beq.n	80014b6 <HAL_ADC_IRQHandler+0xca>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d046      	beq.n	80014b6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d12b      	bne.n	80014a6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001452:	2b00      	cmp	r3, #0
 8001454:	d127      	bne.n	80014a6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800146e:	2b00      	cmp	r3, #0
 8001470:	d119      	bne.n	80014a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0220 	bic.w	r2, r2, #32
 8001480:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d105      	bne.n	80014a6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fabc 	bl	8000a24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f06f 0212 	mvn.w	r2, #18
 80014b4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d057      	beq.n	800157c <HAL_ADC_IRQHandler+0x190>
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d054      	beq.n	800157c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d139      	bne.n	800156c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014fe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001510:	2b00      	cmp	r3, #0
 8001512:	d12b      	bne.n	800156c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	d124      	bne.n	800156c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800152c:	2b00      	cmp	r3, #0
 800152e:	d11d      	bne.n	800156c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001534:	2b00      	cmp	r3, #0
 8001536:	d119      	bne.n	800156c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001546:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d105      	bne.n	800156c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fa9d 	bl	8001aac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f06f 020c 	mvn.w	r2, #12
 800157a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d017      	beq.n	80015c2 <HAL_ADC_IRQHandler+0x1d6>
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d014      	beq.n	80015c2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d10d      	bne.n	80015c2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f837 	bl	8001626 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0201 	mvn.w	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015d0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d015      	beq.n	8001604 <HAL_ADC_IRQHandler+0x218>
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d012      	beq.n	8001604 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f043 0202 	orr.w	r2, r3, #2
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f06f 0220 	mvn.w	r2, #32
 80015f2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f820 	bl	800163a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f06f 0220 	mvn.w	r2, #32
 8001602:	601a      	str	r2, [r3, #0]
  }
}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_ADC_ConfigChannel+0x1c>
 8001668:	2302      	movs	r3, #2
 800166a:	e113      	b.n	8001894 <HAL_ADC_ConfigChannel+0x244>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b09      	cmp	r3, #9
 800167a:	d925      	bls.n	80016c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68d9      	ldr	r1, [r3, #12]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	3b1e      	subs	r3, #30
 8001692:	2207      	movs	r2, #7
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43da      	mvns	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	400a      	ands	r2, r1
 80016a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68d9      	ldr	r1, [r3, #12]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	4603      	mov	r3, r0
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4403      	add	r3, r0
 80016ba:	3b1e      	subs	r3, #30
 80016bc:	409a      	lsls	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	e022      	b.n	800170e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6919      	ldr	r1, [r3, #16]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	2207      	movs	r2, #7
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	400a      	ands	r2, r1
 80016ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6919      	ldr	r1, [r3, #16]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4403      	add	r3, r0
 8001704:	409a      	lsls	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b06      	cmp	r3, #6
 8001714:	d824      	bhi.n	8001760 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b05      	subs	r3, #5
 8001728:	221f      	movs	r2, #31
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	400a      	ands	r2, r1
 8001736:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	3b05      	subs	r3, #5
 8001752:	fa00 f203 	lsl.w	r2, r0, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	635a      	str	r2, [r3, #52]	@ 0x34
 800175e:	e04c      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b0c      	cmp	r3, #12
 8001766:	d824      	bhi.n	80017b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	3b23      	subs	r3, #35	@ 0x23
 800177a:	221f      	movs	r2, #31
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43da      	mvns	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	400a      	ands	r2, r1
 8001788:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b23      	subs	r3, #35	@ 0x23
 80017a4:	fa00 f203 	lsl.w	r2, r0, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80017b0:	e023      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	3b41      	subs	r3, #65	@ 0x41
 80017c4:	221f      	movs	r2, #31
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	400a      	ands	r2, r1
 80017d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3b41      	subs	r3, #65	@ 0x41
 80017ee:	fa00 f203 	lsl.w	r2, r0, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017fa:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <HAL_ADC_ConfigChannel+0x250>)
 80017fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a28      	ldr	r2, [pc, #160]	@ (80018a4 <HAL_ADC_ConfigChannel+0x254>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d10f      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1d8>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b12      	cmp	r3, #18
 800180e:	d10b      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1d      	ldr	r2, [pc, #116]	@ (80018a4 <HAL_ADC_ConfigChannel+0x254>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12b      	bne.n	800188a <HAL_ADC_ConfigChannel+0x23a>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <HAL_ADC_ConfigChannel+0x258>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d003      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x1f4>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b11      	cmp	r3, #17
 8001842:	d122      	bne.n	800188a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a11      	ldr	r2, [pc, #68]	@ (80018a8 <HAL_ADC_ConfigChannel+0x258>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d111      	bne.n	800188a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_ADC_ConfigChannel+0x25c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a11      	ldr	r2, [pc, #68]	@ (80018b0 <HAL_ADC_ConfigChannel+0x260>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	0c9a      	lsrs	r2, r3, #18
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800187c:	e002      	b.n	8001884 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3b01      	subs	r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f9      	bne.n	800187e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40012300 	.word	0x40012300
 80018a4:	40012000 	.word	0x40012000
 80018a8:	10000012 	.word	0x10000012
 80018ac:	20000008 	.word	0x20000008
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018bc:	4b79      	ldr	r3, [pc, #484]	@ (8001aa4 <ADC_Init+0x1f0>)
 80018be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	021a      	lsls	r2, r3, #8
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800190c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800192e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6899      	ldr	r1, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001946:	4a58      	ldr	r2, [pc, #352]	@ (8001aa8 <ADC_Init+0x1f4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d022      	beq.n	8001992 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800195a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800197c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6899      	ldr	r1, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	e00f      	b.n	80019b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0202 	bic.w	r2, r2, #2
 80019c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6899      	ldr	r1, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7e1b      	ldrb	r3, [r3, #24]
 80019cc:	005a      	lsls	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01b      	beq.n	8001a18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6859      	ldr	r1, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	035a      	lsls	r2, r3, #13
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	e007      	b.n	8001a28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	051a      	lsls	r2, r3, #20
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6899      	ldr	r1, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a6a:	025a      	lsls	r2, r3, #9
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6899      	ldr	r1, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	029a      	lsls	r2, r3, #10
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	609a      	str	r2, [r3, #8]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40012300 	.word	0x40012300
 8001aa8:	0f000001 	.word	0x0f000001

08001aac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	@ (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	@ (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff3e 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff8e 	bl	8001bb4 <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5d 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff31 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa2 	bl	8001c1c <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e165      	b.n	8001fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8154 	bne.w	8001fc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d005      	beq.n	8001d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d017      	beq.n	8001dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d123      	bne.n	8001e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80ae 	beq.w	8001fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	4a5c      	ldr	r2, [pc, #368]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e86:	4a58      	ldr	r2, [pc, #352]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	@ (8001fec <HAL_GPIO_Init+0x308>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d025      	beq.n	8001efe <HAL_GPIO_Init+0x21a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ff0 <HAL_GPIO_Init+0x30c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <HAL_GPIO_Init+0x216>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff4 <HAL_GPIO_Init+0x310>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <HAL_GPIO_Init+0x212>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff8 <HAL_GPIO_Init+0x314>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x20e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8001ffc <HAL_GPIO_Init+0x318>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x20a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8002000 <HAL_GPIO_Init+0x31c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x206>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a49      	ldr	r2, [pc, #292]	@ (8002004 <HAL_GPIO_Init+0x320>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x202>
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	e00c      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	e00a      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001eea:	2305      	movs	r3, #5
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a26      	ldr	r2, [pc, #152]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f72:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f96:	4a1c      	ldr	r2, [pc, #112]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc0:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f ae96 	bls.w	8001d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3724      	adds	r7, #36	@ 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021400 	.word	0x40021400
 8002004:	40021800 	.word	0x40021800
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	619a      	str	r2, [r3, #24]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002050:	887a      	ldrh	r2, [r7, #2]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	041a      	lsls	r2, r3, #16
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43d9      	mvns	r1, r3
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	400b      	ands	r3, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	619a      	str	r2, [r3, #24]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0cc      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b68      	ldr	r3, [pc, #416]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d90c      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b65      	ldr	r3, [pc, #404]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b63      	ldr	r3, [pc, #396]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b8      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c8:	4b59      	ldr	r3, [pc, #356]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a58      	ldr	r2, [pc, #352]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e0:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b50      	ldr	r3, [pc, #320]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	494d      	ldr	r1, [pc, #308]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d044      	beq.n	8002194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d119      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d003      	beq.n	8002132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212e:	2b03      	cmp	r3, #3
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b3f      	ldr	r3, [pc, #252]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b3b      	ldr	r3, [pc, #236]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e067      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b37      	ldr	r3, [pc, #220]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4934      	ldr	r1, [pc, #208]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7ff f814 	bl	8001190 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff f810 	bl	8001190 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e04f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b25      	ldr	r3, [pc, #148]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d20c      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b22      	ldr	r3, [pc, #136]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e032      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4916      	ldr	r1, [pc, #88]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e6:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	490e      	ldr	r1, [pc, #56]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021fa:	f000 f855 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	490a      	ldr	r1, [pc, #40]	@ (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	4a09      	ldr	r2, [pc, #36]	@ (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe ff74 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00
 8002230:	40023800 	.word	0x40023800
 8002234:	08004474 	.word	0x08004474
 8002238:	20000008 	.word	0x20000008
 800223c:	2000000c 	.word	0x2000000c

08002240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_RCC_GetHCLKFreq+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000008 	.word	0x20000008

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800225c:	f7ff fff0 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0a9b      	lsrs	r3, r3, #10
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	@ (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	08004484 	.word	0x08004484

08002280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002284:	f7ff ffdc 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0b5b      	lsrs	r3, r3, #13
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4903      	ldr	r1, [pc, #12]	@ (80022a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	08004484 	.word	0x08004484

080022a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022ac:	b0ae      	sub	sp, #184	@ 0xb8
 80022ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ce:	4bcb      	ldr	r3, [pc, #812]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x354>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	f200 8206 	bhi.w	80026e8 <HAL_RCC_GetSysClockFreq+0x440>
 80022dc:	a201      	add	r2, pc, #4	@ (adr r2, 80022e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	08002319 	.word	0x08002319
 80022e8:	080026e9 	.word	0x080026e9
 80022ec:	080026e9 	.word	0x080026e9
 80022f0:	080026e9 	.word	0x080026e9
 80022f4:	08002321 	.word	0x08002321
 80022f8:	080026e9 	.word	0x080026e9
 80022fc:	080026e9 	.word	0x080026e9
 8002300:	080026e9 	.word	0x080026e9
 8002304:	08002329 	.word	0x08002329
 8002308:	080026e9 	.word	0x080026e9
 800230c:	080026e9 	.word	0x080026e9
 8002310:	080026e9 	.word	0x080026e9
 8002314:	08002519 	.word	0x08002519
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4bb9      	ldr	r3, [pc, #740]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x358>)
 800231a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800231e:	e1e7      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002320:	4bb8      	ldr	r3, [pc, #736]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002326:	e1e3      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002328:	4bb4      	ldr	r3, [pc, #720]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x354>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002334:	4bb1      	ldr	r3, [pc, #708]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d071      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002340:	4bae      	ldr	r3, [pc, #696]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	2200      	movs	r2, #0
 8002348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800234c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002350:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002366:	4622      	mov	r2, r4
 8002368:	462b      	mov	r3, r5
 800236a:	f04f 0000 	mov.w	r0, #0
 800236e:	f04f 0100 	mov.w	r1, #0
 8002372:	0159      	lsls	r1, r3, #5
 8002374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002378:	0150      	lsls	r0, r2, #5
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4621      	mov	r1, r4
 8002380:	1a51      	subs	r1, r2, r1
 8002382:	6439      	str	r1, [r7, #64]	@ 0x40
 8002384:	4629      	mov	r1, r5
 8002386:	eb63 0301 	sbc.w	r3, r3, r1
 800238a:	647b      	str	r3, [r7, #68]	@ 0x44
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002398:	4649      	mov	r1, r9
 800239a:	018b      	lsls	r3, r1, #6
 800239c:	4641      	mov	r1, r8
 800239e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023a2:	4641      	mov	r1, r8
 80023a4:	018a      	lsls	r2, r1, #6
 80023a6:	4641      	mov	r1, r8
 80023a8:	1a51      	subs	r1, r2, r1
 80023aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023ac:	4649      	mov	r1, r9
 80023ae:	eb63 0301 	sbc.w	r3, r3, r1
 80023b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80023c0:	4649      	mov	r1, r9
 80023c2:	00cb      	lsls	r3, r1, #3
 80023c4:	4641      	mov	r1, r8
 80023c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ca:	4641      	mov	r1, r8
 80023cc:	00ca      	lsls	r2, r1, #3
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	4622      	mov	r2, r4
 80023d6:	189b      	adds	r3, r3, r2
 80023d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023da:	462b      	mov	r3, r5
 80023dc:	460a      	mov	r2, r1
 80023de:	eb42 0303 	adc.w	r3, r2, r3
 80023e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023f0:	4629      	mov	r1, r5
 80023f2:	024b      	lsls	r3, r1, #9
 80023f4:	4621      	mov	r1, r4
 80023f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023fa:	4621      	mov	r1, r4
 80023fc:	024a      	lsls	r2, r1, #9
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002406:	2200      	movs	r2, #0
 8002408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800240c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002410:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002414:	f7fd ff54 	bl	80002c0 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4613      	mov	r3, r2
 800241e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002422:	e067      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002424:	4b75      	ldr	r3, [pc, #468]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	2200      	movs	r2, #0
 800242c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002430:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002434:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800243e:	2300      	movs	r3, #0
 8002440:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002442:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002446:	4622      	mov	r2, r4
 8002448:	462b      	mov	r3, r5
 800244a:	f04f 0000 	mov.w	r0, #0
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	0159      	lsls	r1, r3, #5
 8002454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002458:	0150      	lsls	r0, r2, #5
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4621      	mov	r1, r4
 8002460:	1a51      	subs	r1, r2, r1
 8002462:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002464:	4629      	mov	r1, r5
 8002466:	eb63 0301 	sbc.w	r3, r3, r1
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002478:	4649      	mov	r1, r9
 800247a:	018b      	lsls	r3, r1, #6
 800247c:	4641      	mov	r1, r8
 800247e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002482:	4641      	mov	r1, r8
 8002484:	018a      	lsls	r2, r1, #6
 8002486:	4641      	mov	r1, r8
 8002488:	ebb2 0a01 	subs.w	sl, r2, r1
 800248c:	4649      	mov	r1, r9
 800248e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800249e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024a6:	4692      	mov	sl, r2
 80024a8:	469b      	mov	fp, r3
 80024aa:	4623      	mov	r3, r4
 80024ac:	eb1a 0303 	adds.w	r3, sl, r3
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	462b      	mov	r3, r5
 80024b4:	eb4b 0303 	adc.w	r3, fp, r3
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024c6:	4629      	mov	r1, r5
 80024c8:	028b      	lsls	r3, r1, #10
 80024ca:	4621      	mov	r1, r4
 80024cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024d0:	4621      	mov	r1, r4
 80024d2:	028a      	lsls	r2, r1, #10
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024dc:	2200      	movs	r2, #0
 80024de:	673b      	str	r3, [r7, #112]	@ 0x70
 80024e0:	677a      	str	r2, [r7, #116]	@ 0x74
 80024e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024e6:	f7fd feeb 	bl	80002c0 <__aeabi_uldivmod>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4613      	mov	r3, r2
 80024f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024f4:	4b41      	ldr	r3, [pc, #260]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x354>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	3301      	adds	r3, #1
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800250a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002516:	e0eb      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002518:	4b38      	ldr	r3, [pc, #224]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x354>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002520:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002524:	4b35      	ldr	r3, [pc, #212]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d06b      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002530:	4b32      	ldr	r3, [pc, #200]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	2200      	movs	r2, #0
 8002538:	66bb      	str	r3, [r7, #104]	@ 0x68
 800253a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800253c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800253e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002542:	663b      	str	r3, [r7, #96]	@ 0x60
 8002544:	2300      	movs	r3, #0
 8002546:	667b      	str	r3, [r7, #100]	@ 0x64
 8002548:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800254c:	4622      	mov	r2, r4
 800254e:	462b      	mov	r3, r5
 8002550:	f04f 0000 	mov.w	r0, #0
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	0159      	lsls	r1, r3, #5
 800255a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255e:	0150      	lsls	r0, r2, #5
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4621      	mov	r1, r4
 8002566:	1a51      	subs	r1, r2, r1
 8002568:	61b9      	str	r1, [r7, #24]
 800256a:	4629      	mov	r1, r5
 800256c:	eb63 0301 	sbc.w	r3, r3, r1
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800257e:	4659      	mov	r1, fp
 8002580:	018b      	lsls	r3, r1, #6
 8002582:	4651      	mov	r1, sl
 8002584:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002588:	4651      	mov	r1, sl
 800258a:	018a      	lsls	r2, r1, #6
 800258c:	4651      	mov	r1, sl
 800258e:	ebb2 0801 	subs.w	r8, r2, r1
 8002592:	4659      	mov	r1, fp
 8002594:	eb63 0901 	sbc.w	r9, r3, r1
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ac:	4690      	mov	r8, r2
 80025ae:	4699      	mov	r9, r3
 80025b0:	4623      	mov	r3, r4
 80025b2:	eb18 0303 	adds.w	r3, r8, r3
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	462b      	mov	r3, r5
 80025ba:	eb49 0303 	adc.w	r3, r9, r3
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025cc:	4629      	mov	r1, r5
 80025ce:	024b      	lsls	r3, r1, #9
 80025d0:	4621      	mov	r1, r4
 80025d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025d6:	4621      	mov	r1, r4
 80025d8:	024a      	lsls	r2, r1, #9
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e2:	2200      	movs	r2, #0
 80025e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025e6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025ec:	f7fd fe68 	bl	80002c0 <__aeabi_uldivmod>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4613      	mov	r3, r2
 80025f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025fa:	e065      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x420>
 80025fc:	40023800 	.word	0x40023800
 8002600:	00f42400 	.word	0x00f42400
 8002604:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002608:	4b3d      	ldr	r3, [pc, #244]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x458>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	2200      	movs	r2, #0
 8002610:	4618      	mov	r0, r3
 8002612:	4611      	mov	r1, r2
 8002614:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002618:	653b      	str	r3, [r7, #80]	@ 0x50
 800261a:	2300      	movs	r3, #0
 800261c:	657b      	str	r3, [r7, #84]	@ 0x54
 800261e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002622:	4642      	mov	r2, r8
 8002624:	464b      	mov	r3, r9
 8002626:	f04f 0000 	mov.w	r0, #0
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	0159      	lsls	r1, r3, #5
 8002630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002634:	0150      	lsls	r0, r2, #5
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4641      	mov	r1, r8
 800263c:	1a51      	subs	r1, r2, r1
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	4649      	mov	r1, r9
 8002642:	eb63 0301 	sbc.w	r3, r3, r1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002654:	4659      	mov	r1, fp
 8002656:	018b      	lsls	r3, r1, #6
 8002658:	4651      	mov	r1, sl
 800265a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800265e:	4651      	mov	r1, sl
 8002660:	018a      	lsls	r2, r1, #6
 8002662:	4651      	mov	r1, sl
 8002664:	1a54      	subs	r4, r2, r1
 8002666:	4659      	mov	r1, fp
 8002668:	eb63 0501 	sbc.w	r5, r3, r1
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	00eb      	lsls	r3, r5, #3
 8002676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800267a:	00e2      	lsls	r2, r4, #3
 800267c:	4614      	mov	r4, r2
 800267e:	461d      	mov	r5, r3
 8002680:	4643      	mov	r3, r8
 8002682:	18e3      	adds	r3, r4, r3
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	464b      	mov	r3, r9
 8002688:	eb45 0303 	adc.w	r3, r5, r3
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800269a:	4629      	mov	r1, r5
 800269c:	028b      	lsls	r3, r1, #10
 800269e:	4621      	mov	r1, r4
 80026a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a4:	4621      	mov	r1, r4
 80026a6:	028a      	lsls	r2, r1, #10
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026b0:	2200      	movs	r2, #0
 80026b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026b4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80026b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026ba:	f7fd fe01 	bl	80002c0 <__aeabi_uldivmod>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4613      	mov	r3, r2
 80026c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x458>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0f1b      	lsrs	r3, r3, #28
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80026d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026e6:	e003      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	37b8      	adds	r7, #184	@ 0xb8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	00f42400 	.word	0x00f42400

08002708 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e28d      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8083 	beq.w	800282e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002728:	4b94      	ldr	r3, [pc, #592]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b04      	cmp	r3, #4
 8002732:	d019      	beq.n	8002768 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002734:	4b91      	ldr	r3, [pc, #580]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800273c:	2b08      	cmp	r3, #8
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002740:	4b8e      	ldr	r3, [pc, #568]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002748:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800274c:	d00c      	beq.n	8002768 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4b8b      	ldr	r3, [pc, #556]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d112      	bne.n	8002780 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275a:	4b88      	ldr	r3, [pc, #544]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002762:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002766:	d10b      	bne.n	8002780 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	4b84      	ldr	r3, [pc, #528]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d05b      	beq.n	800282c <HAL_RCC_OscConfig+0x124>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d157      	bne.n	800282c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e25a      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002788:	d106      	bne.n	8002798 <HAL_RCC_OscConfig+0x90>
 800278a:	4b7c      	ldr	r3, [pc, #496]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7b      	ldr	r2, [pc, #492]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e01d      	b.n	80027d4 <HAL_RCC_OscConfig+0xcc>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0xb4>
 80027a2:	4b76      	ldr	r3, [pc, #472]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a75      	ldr	r2, [pc, #468]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b73      	ldr	r3, [pc, #460]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a72      	ldr	r2, [pc, #456]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0xcc>
 80027bc:	4b6f      	ldr	r3, [pc, #444]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a6e      	ldr	r2, [pc, #440]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b6c      	ldr	r3, [pc, #432]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6b      	ldr	r2, [pc, #428]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fcd8 	bl	8001190 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e4:	f7fe fcd4 	bl	8001190 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	@ 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e21f      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b61      	ldr	r3, [pc, #388]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0xdc>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fcc4 	bl	8001190 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe fcc0 	bl	8001190 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	@ 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e20b      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281e:	4b57      	ldr	r3, [pc, #348]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x104>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d06f      	beq.n	800291a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800283a:	4b50      	ldr	r3, [pc, #320]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b00      	cmp	r3, #0
 8002844:	d017      	beq.n	8002876 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002846:	4b4d      	ldr	r3, [pc, #308]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800284e:	2b08      	cmp	r3, #8
 8002850:	d105      	bne.n	800285e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002852:	4b4a      	ldr	r3, [pc, #296]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285e:	4b47      	ldr	r3, [pc, #284]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d11c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286a:	4b44      	ldr	r3, [pc, #272]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d116      	bne.n	80028a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002876:	4b41      	ldr	r3, [pc, #260]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_RCC_OscConfig+0x186>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e1d3      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288e:	4b3b      	ldr	r3, [pc, #236]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4937      	ldr	r1, [pc, #220]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	e03a      	b.n	800291a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ac:	4b34      	ldr	r3, [pc, #208]	@ (8002980 <HAL_RCC_OscConfig+0x278>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe fc6d 	bl	8001190 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ba:	f7fe fc69 	bl	8001190 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1b4      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028cc:	4b2b      	ldr	r3, [pc, #172]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d8:	4b28      	ldr	r3, [pc, #160]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4925      	ldr	r1, [pc, #148]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]
 80028ec:	e015      	b.n	800291a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ee:	4b24      	ldr	r3, [pc, #144]	@ (8002980 <HAL_RCC_OscConfig+0x278>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fc4c 	bl	8001190 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fc:	f7fe fc48 	bl	8001190 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e193      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290e:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d036      	beq.n	8002994 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292e:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fc2c 	bl	8001190 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293c:	f7fe fc28 	bl	8001190 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e173      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294e:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <HAL_RCC_OscConfig+0x274>)
 8002950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x234>
 800295a:	e01b      	b.n	8002994 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295c:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_RCC_OscConfig+0x27c>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002962:	f7fe fc15 	bl	8001190 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	e00e      	b.n	8002988 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fc11 	bl	8001190 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d907      	bls.n	8002988 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e15c      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
 800297c:	40023800 	.word	0x40023800
 8002980:	42470000 	.word	0x42470000
 8002984:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 800298a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ea      	bne.n	800296a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8097 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a6:	4b83      	ldr	r3, [pc, #524]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10f      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	4a7e      	ldr	r2, [pc, #504]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c2:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ce:	2301      	movs	r3, #1
 80029d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d2:	4b79      	ldr	r3, [pc, #484]	@ (8002bb8 <HAL_RCC_OscConfig+0x4b0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d118      	bne.n	8002a10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029de:	4b76      	ldr	r3, [pc, #472]	@ (8002bb8 <HAL_RCC_OscConfig+0x4b0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a75      	ldr	r2, [pc, #468]	@ (8002bb8 <HAL_RCC_OscConfig+0x4b0>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ea:	f7fe fbd1 	bl	8001190 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f2:	f7fe fbcd 	bl	8001190 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e118      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a04:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb8 <HAL_RCC_OscConfig+0x4b0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x31e>
 8002a18:	4b66      	ldr	r3, [pc, #408]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1c:	4a65      	ldr	r2, [pc, #404]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a24:	e01c      	b.n	8002a60 <HAL_RCC_OscConfig+0x358>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b05      	cmp	r3, #5
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x340>
 8002a2e:	4b61      	ldr	r3, [pc, #388]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	4a60      	ldr	r2, [pc, #384]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3a:	4b5e      	ldr	r3, [pc, #376]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3e:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0x358>
 8002a48:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a59      	ldr	r2, [pc, #356]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a54:	4b57      	ldr	r3, [pc, #348]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a58:	4a56      	ldr	r2, [pc, #344]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	f023 0304 	bic.w	r3, r3, #4
 8002a5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d015      	beq.n	8002a94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7fe fb92 	bl	8001190 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a70:	f7fe fb8e 	bl	8001190 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0d7      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a86:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0ee      	beq.n	8002a70 <HAL_RCC_OscConfig+0x368>
 8002a92:	e014      	b.n	8002abe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7fe fb7c 	bl	8001190 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fb78 	bl	8001190 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0c1      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab2:	4b40      	ldr	r3, [pc, #256]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1ee      	bne.n	8002a9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	4a3a      	ldr	r2, [pc, #232]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80ad 	beq.w	8002c34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ada:	4b36      	ldr	r3, [pc, #216]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d060      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d145      	bne.n	8002b7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b33      	ldr	r3, [pc, #204]	@ (8002bbc <HAL_RCC_OscConfig+0x4b4>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7fe fb4c 	bl	8001190 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe fb48 	bl	8001190 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e093      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	4b29      	ldr	r3, [pc, #164]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	019b      	lsls	r3, r3, #6
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	3b01      	subs	r3, #1
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	071b      	lsls	r3, r3, #28
 8002b46:	491b      	ldr	r1, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <HAL_RCC_OscConfig+0x4b4>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fb1d 	bl	8001190 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe fb19 	bl	8001190 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e064      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x452>
 8002b78:	e05c      	b.n	8002c34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	4b10      	ldr	r3, [pc, #64]	@ (8002bbc <HAL_RCC_OscConfig+0x4b4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fb06 	bl	8001190 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe fb02 	bl	8001190 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04d      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x480>
 8002ba6:	e045      	b.n	8002c34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e040      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c40 <HAL_RCC_OscConfig+0x538>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d030      	beq.n	8002c30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d129      	bne.n	8002c30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d122      	bne.n	8002c30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d119      	bne.n	8002c30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d10f      	bne.n	8002c30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800

08002c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e041      	b.n	8002cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe f900 	bl	8000e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f000 f95e 	bl	8002f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d001      	beq.n	8002cfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e046      	b.n	8002d8a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a23      	ldr	r2, [pc, #140]	@ (8002d98 <HAL_TIM_Base_Start+0xb4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d022      	beq.n	8002d54 <HAL_TIM_Base_Start+0x70>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d16:	d01d      	beq.n	8002d54 <HAL_TIM_Base_Start+0x70>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d9c <HAL_TIM_Base_Start+0xb8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d018      	beq.n	8002d54 <HAL_TIM_Base_Start+0x70>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1e      	ldr	r2, [pc, #120]	@ (8002da0 <HAL_TIM_Base_Start+0xbc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_TIM_Base_Start+0x70>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1c      	ldr	r2, [pc, #112]	@ (8002da4 <HAL_TIM_Base_Start+0xc0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00e      	beq.n	8002d54 <HAL_TIM_Base_Start+0x70>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002da8 <HAL_TIM_Base_Start+0xc4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_TIM_Base_Start+0x70>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <HAL_TIM_Base_Start+0xc8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_TIM_Base_Start+0x70>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <HAL_TIM_Base_Start+0xcc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d111      	bne.n	8002d78 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d010      	beq.n	8002d88 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	e007      	b.n	8002d88 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800
 8002da4:	40000c00 	.word	0x40000c00
 8002da8:	40010400 	.word	0x40010400
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40001800 	.word	0x40001800

08002db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e0b4      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x186>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002df6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e08:	d03e      	beq.n	8002e88 <HAL_TIM_ConfigClockSource+0xd4>
 8002e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e0e:	f200 8087 	bhi.w	8002f20 <HAL_TIM_ConfigClockSource+0x16c>
 8002e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e16:	f000 8086 	beq.w	8002f26 <HAL_TIM_ConfigClockSource+0x172>
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e1e:	d87f      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b70      	cmp	r3, #112	@ 0x70
 8002e22:	d01a      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0xa6>
 8002e24:	2b70      	cmp	r3, #112	@ 0x70
 8002e26:	d87b      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b60      	cmp	r3, #96	@ 0x60
 8002e2a:	d050      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x11a>
 8002e2c:	2b60      	cmp	r3, #96	@ 0x60
 8002e2e:	d877      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b50      	cmp	r3, #80	@ 0x50
 8002e32:	d03c      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0xfa>
 8002e34:	2b50      	cmp	r3, #80	@ 0x50
 8002e36:	d873      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b40      	cmp	r3, #64	@ 0x40
 8002e3a:	d058      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x13a>
 8002e3c:	2b40      	cmp	r3, #64	@ 0x40
 8002e3e:	d86f      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b30      	cmp	r3, #48	@ 0x30
 8002e42:	d064      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x15a>
 8002e44:	2b30      	cmp	r3, #48	@ 0x30
 8002e46:	d86b      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x16c>
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d060      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x15a>
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d867      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x16c>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d05c      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x15a>
 8002e54:	2b10      	cmp	r3, #16
 8002e56:	d05a      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x15a>
 8002e58:	e062      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e6a:	f000 f991 	bl	8003190 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	609a      	str	r2, [r3, #8]
      break;
 8002e86:	e04f      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e98:	f000 f97a 	bl	8003190 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eaa:	609a      	str	r2, [r3, #8]
      break;
 8002eac:	e03c      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 f8ee 	bl	800309c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2150      	movs	r1, #80	@ 0x50
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f947 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e02c      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eda:	461a      	mov	r2, r3
 8002edc:	f000 f90d 	bl	80030fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2160      	movs	r1, #96	@ 0x60
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f937 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002eec:	e01c      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efa:	461a      	mov	r2, r3
 8002efc:	f000 f8ce 	bl	800309c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2140      	movs	r1, #64	@ 0x40
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f927 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002f0c:	e00c      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f000 f91e 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002f1e:	e003      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      break;
 8002f24:	e000      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a46      	ldr	r2, [pc, #280]	@ (8003070 <TIM_Base_SetConfig+0x12c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f62:	d00f      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a43      	ldr	r2, [pc, #268]	@ (8003074 <TIM_Base_SetConfig+0x130>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00b      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a42      	ldr	r2, [pc, #264]	@ (8003078 <TIM_Base_SetConfig+0x134>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d007      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a41      	ldr	r2, [pc, #260]	@ (800307c <TIM_Base_SetConfig+0x138>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a40      	ldr	r2, [pc, #256]	@ (8003080 <TIM_Base_SetConfig+0x13c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d108      	bne.n	8002f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a35      	ldr	r2, [pc, #212]	@ (8003070 <TIM_Base_SetConfig+0x12c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02b      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa4:	d027      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a32      	ldr	r2, [pc, #200]	@ (8003074 <TIM_Base_SetConfig+0x130>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d023      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a31      	ldr	r2, [pc, #196]	@ (8003078 <TIM_Base_SetConfig+0x134>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01f      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a30      	ldr	r2, [pc, #192]	@ (800307c <TIM_Base_SetConfig+0x138>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01b      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8003080 <TIM_Base_SetConfig+0x13c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d017      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8003084 <TIM_Base_SetConfig+0x140>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <TIM_Base_SetConfig+0x144>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00f      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800308c <TIM_Base_SetConfig+0x148>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8003090 <TIM_Base_SetConfig+0x14c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8003094 <TIM_Base_SetConfig+0x150>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d003      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a29      	ldr	r2, [pc, #164]	@ (8003098 <TIM_Base_SetConfig+0x154>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d108      	bne.n	8003008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a10      	ldr	r2, [pc, #64]	@ (8003070 <TIM_Base_SetConfig+0x12c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0xf8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a12      	ldr	r2, [pc, #72]	@ (8003080 <TIM_Base_SetConfig+0x13c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d103      	bne.n	8003044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	611a      	str	r2, [r3, #16]
  }
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40010400 	.word	0x40010400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800
 8003090:	40001800 	.word	0x40001800
 8003094:	40001c00 	.word	0x40001c00
 8003098:	40002000 	.word	0x40002000

0800309c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 030a 	bic.w	r3, r3, #10
 80030d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f023 0210 	bic.w	r2, r3, #16
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	031b      	lsls	r3, r3, #12
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003136:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	621a      	str	r2, [r3, #32]
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	f043 0307 	orr.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	021a      	lsls	r2, r3, #8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e05a      	b.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a21      	ldr	r2, [pc, #132]	@ (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003234:	d01d      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1d      	ldr	r2, [pc, #116]	@ (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d018      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1b      	ldr	r2, [pc, #108]	@ (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1a      	ldr	r2, [pc, #104]	@ (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	@ (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d009      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a17      	ldr	r2, [pc, #92]	@ (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a15      	ldr	r2, [pc, #84]	@ (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10c      	bne.n	800328c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4313      	orrs	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40010400 	.word	0x40010400
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40001800 	.word	0x40001800

080032c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e042      	b.n	8003360 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fdf4 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2224      	movs	r2, #36	@ 0x24
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800330a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f973 	bl	80035f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	@ 0x28
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b20      	cmp	r3, #32
 8003386:	d175      	bne.n	8003474 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_UART_Transmit+0x2c>
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e06e      	b.n	8003476 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2221      	movs	r2, #33	@ 0x21
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033a6:	f7fd fef3 	bl	8001190 <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	88fa      	ldrh	r2, [r7, #6]
 80033b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033c0:	d108      	bne.n	80033d4 <HAL_UART_Transmit+0x6c>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	e003      	b.n	80033dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033dc:	e02e      	b.n	800343c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	@ 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f848 	bl	800347e <UART_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e03a      	b.n	8003476 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003414:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	3302      	adds	r3, #2
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	e007      	b.n	800342e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	3301      	adds	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1cb      	bne.n	80033de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	2140      	movs	r1, #64	@ 0x40
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f814 	bl	800347e <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e006      	b.n	8003476 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4613      	mov	r3, r2
 800348c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348e:	e03b      	b.n	8003508 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d037      	beq.n	8003508 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7fd fe7a 	bl	8001190 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	6a3a      	ldr	r2, [r7, #32]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <UART_WaitOnFlagUntilTimeout+0x30>
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e03a      	b.n	8003528 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d023      	beq.n	8003508 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b80      	cmp	r3, #128	@ 0x80
 80034c4:	d020      	beq.n	8003508 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d01d      	beq.n	8003508 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d116      	bne.n	8003508 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f81d 	bl	8003530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2208      	movs	r2, #8
 80034fa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e00f      	b.n	8003528 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	429a      	cmp	r2, r3
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	429a      	cmp	r2, r3
 8003524:	d0b4      	beq.n	8003490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b095      	sub	sp, #84	@ 0x54
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800354e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003558:	643a      	str	r2, [r7, #64]	@ 0x40
 800355a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800355e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003560:	e841 2300 	strex	r3, r2, [r1]
 8003564:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e5      	bne.n	8003538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3314      	adds	r3, #20
 8003572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	61fb      	str	r3, [r7, #28]
   return(result);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3314      	adds	r3, #20
 800358a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800358c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800358e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e5      	bne.n	800356c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d119      	bne.n	80035dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f023 0310 	bic.w	r3, r3, #16
 80035be:	647b      	str	r3, [r7, #68]	@ 0x44
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035c8:	61ba      	str	r2, [r7, #24]
 80035ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6979      	ldr	r1, [r7, #20]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	613b      	str	r3, [r7, #16]
   return(result);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80035ea:	bf00      	nop
 80035ec:	3754      	adds	r7, #84	@ 0x54
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035fc:	b0c0      	sub	sp, #256	@ 0x100
 80035fe:	af00      	add	r7, sp, #0
 8003600:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003614:	68d9      	ldr	r1, [r3, #12]
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	ea40 0301 	orr.w	r3, r0, r1
 8003620:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	431a      	orrs	r2, r3
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	431a      	orrs	r2, r3
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003650:	f021 010c 	bic.w	r1, r1, #12
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800365e:	430b      	orrs	r3, r1
 8003660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003672:	6999      	ldr	r1, [r3, #24]
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	ea40 0301 	orr.w	r3, r0, r1
 800367e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b8f      	ldr	r3, [pc, #572]	@ (80038c4 <UART_SetConfig+0x2cc>)
 8003688:	429a      	cmp	r2, r3
 800368a:	d005      	beq.n	8003698 <UART_SetConfig+0xa0>
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b8d      	ldr	r3, [pc, #564]	@ (80038c8 <UART_SetConfig+0x2d0>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d104      	bne.n	80036a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003698:	f7fe fdf2 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 800369c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036a0:	e003      	b.n	80036aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036a2:	f7fe fdd9 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 80036a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036b4:	f040 810c 	bne.w	80038d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036bc:	2200      	movs	r2, #0
 80036be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036ca:	4622      	mov	r2, r4
 80036cc:	462b      	mov	r3, r5
 80036ce:	1891      	adds	r1, r2, r2
 80036d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036d2:	415b      	adcs	r3, r3
 80036d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036da:	4621      	mov	r1, r4
 80036dc:	eb12 0801 	adds.w	r8, r2, r1
 80036e0:	4629      	mov	r1, r5
 80036e2:	eb43 0901 	adc.w	r9, r3, r1
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036fa:	4690      	mov	r8, r2
 80036fc:	4699      	mov	r9, r3
 80036fe:	4623      	mov	r3, r4
 8003700:	eb18 0303 	adds.w	r3, r8, r3
 8003704:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003708:	462b      	mov	r3, r5
 800370a:	eb49 0303 	adc.w	r3, r9, r3
 800370e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800371e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003726:	460b      	mov	r3, r1
 8003728:	18db      	adds	r3, r3, r3
 800372a:	653b      	str	r3, [r7, #80]	@ 0x50
 800372c:	4613      	mov	r3, r2
 800372e:	eb42 0303 	adc.w	r3, r2, r3
 8003732:	657b      	str	r3, [r7, #84]	@ 0x54
 8003734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800373c:	f7fc fdc0 	bl	80002c0 <__aeabi_uldivmod>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4b61      	ldr	r3, [pc, #388]	@ (80038cc <UART_SetConfig+0x2d4>)
 8003746:	fba3 2302 	umull	r2, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	011c      	lsls	r4, r3, #4
 800374e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003752:	2200      	movs	r2, #0
 8003754:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003758:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800375c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003760:	4642      	mov	r2, r8
 8003762:	464b      	mov	r3, r9
 8003764:	1891      	adds	r1, r2, r2
 8003766:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003768:	415b      	adcs	r3, r3
 800376a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800376c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003770:	4641      	mov	r1, r8
 8003772:	eb12 0a01 	adds.w	sl, r2, r1
 8003776:	4649      	mov	r1, r9
 8003778:	eb43 0b01 	adc.w	fp, r3, r1
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003788:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800378c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003790:	4692      	mov	sl, r2
 8003792:	469b      	mov	fp, r3
 8003794:	4643      	mov	r3, r8
 8003796:	eb1a 0303 	adds.w	r3, sl, r3
 800379a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800379e:	464b      	mov	r3, r9
 80037a0:	eb4b 0303 	adc.w	r3, fp, r3
 80037a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037bc:	460b      	mov	r3, r1
 80037be:	18db      	adds	r3, r3, r3
 80037c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c2:	4613      	mov	r3, r2
 80037c4:	eb42 0303 	adc.w	r3, r2, r3
 80037c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037d2:	f7fc fd75 	bl	80002c0 <__aeabi_uldivmod>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	4b3b      	ldr	r3, [pc, #236]	@ (80038cc <UART_SetConfig+0x2d4>)
 80037de:	fba3 2301 	umull	r2, r3, r3, r1
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2264      	movs	r2, #100	@ 0x64
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	1acb      	subs	r3, r1, r3
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037f2:	4b36      	ldr	r3, [pc, #216]	@ (80038cc <UART_SetConfig+0x2d4>)
 80037f4:	fba3 2302 	umull	r2, r3, r3, r2
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003800:	441c      	add	r4, r3
 8003802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800380c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003810:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	1891      	adds	r1, r2, r2
 800381a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800381c:	415b      	adcs	r3, r3
 800381e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003824:	4641      	mov	r1, r8
 8003826:	1851      	adds	r1, r2, r1
 8003828:	6339      	str	r1, [r7, #48]	@ 0x30
 800382a:	4649      	mov	r1, r9
 800382c:	414b      	adcs	r3, r1
 800382e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800383c:	4659      	mov	r1, fp
 800383e:	00cb      	lsls	r3, r1, #3
 8003840:	4651      	mov	r1, sl
 8003842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003846:	4651      	mov	r1, sl
 8003848:	00ca      	lsls	r2, r1, #3
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	4603      	mov	r3, r0
 8003850:	4642      	mov	r2, r8
 8003852:	189b      	adds	r3, r3, r2
 8003854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003858:	464b      	mov	r3, r9
 800385a:	460a      	mov	r2, r1
 800385c:	eb42 0303 	adc.w	r3, r2, r3
 8003860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003870:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003874:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003878:	460b      	mov	r3, r1
 800387a:	18db      	adds	r3, r3, r3
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800387e:	4613      	mov	r3, r2
 8003880:	eb42 0303 	adc.w	r3, r2, r3
 8003884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800388a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800388e:	f7fc fd17 	bl	80002c0 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <UART_SetConfig+0x2d4>)
 8003898:	fba3 1302 	umull	r1, r3, r3, r2
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	2164      	movs	r1, #100	@ 0x64
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	3332      	adds	r3, #50	@ 0x32
 80038aa:	4a08      	ldr	r2, [pc, #32]	@ (80038cc <UART_SetConfig+0x2d4>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	f003 0207 	and.w	r2, r3, #7
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4422      	add	r2, r4
 80038be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038c0:	e106      	b.n	8003ad0 <UART_SetConfig+0x4d8>
 80038c2:	bf00      	nop
 80038c4:	40011000 	.word	0x40011000
 80038c8:	40011400 	.word	0x40011400
 80038cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038e2:	4642      	mov	r2, r8
 80038e4:	464b      	mov	r3, r9
 80038e6:	1891      	adds	r1, r2, r2
 80038e8:	6239      	str	r1, [r7, #32]
 80038ea:	415b      	adcs	r3, r3
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038f2:	4641      	mov	r1, r8
 80038f4:	1854      	adds	r4, r2, r1
 80038f6:	4649      	mov	r1, r9
 80038f8:	eb43 0501 	adc.w	r5, r3, r1
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	00eb      	lsls	r3, r5, #3
 8003906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390a:	00e2      	lsls	r2, r4, #3
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4643      	mov	r3, r8
 8003912:	18e3      	adds	r3, r4, r3
 8003914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003918:	464b      	mov	r3, r9
 800391a:	eb45 0303 	adc.w	r3, r5, r3
 800391e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800392e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800393e:	4629      	mov	r1, r5
 8003940:	008b      	lsls	r3, r1, #2
 8003942:	4621      	mov	r1, r4
 8003944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003948:	4621      	mov	r1, r4
 800394a:	008a      	lsls	r2, r1, #2
 800394c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003950:	f7fc fcb6 	bl	80002c0 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4b60      	ldr	r3, [pc, #384]	@ (8003adc <UART_SetConfig+0x4e4>)
 800395a:	fba3 2302 	umull	r2, r3, r3, r2
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	011c      	lsls	r4, r3, #4
 8003962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003966:	2200      	movs	r2, #0
 8003968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800396c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003974:	4642      	mov	r2, r8
 8003976:	464b      	mov	r3, r9
 8003978:	1891      	adds	r1, r2, r2
 800397a:	61b9      	str	r1, [r7, #24]
 800397c:	415b      	adcs	r3, r3
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003984:	4641      	mov	r1, r8
 8003986:	1851      	adds	r1, r2, r1
 8003988:	6139      	str	r1, [r7, #16]
 800398a:	4649      	mov	r1, r9
 800398c:	414b      	adcs	r3, r1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800399c:	4659      	mov	r1, fp
 800399e:	00cb      	lsls	r3, r1, #3
 80039a0:	4651      	mov	r1, sl
 80039a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a6:	4651      	mov	r1, sl
 80039a8:	00ca      	lsls	r2, r1, #3
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	4642      	mov	r2, r8
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039b8:	464b      	mov	r3, r9
 80039ba:	460a      	mov	r2, r1
 80039bc:	eb42 0303 	adc.w	r3, r2, r3
 80039c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039dc:	4649      	mov	r1, r9
 80039de:	008b      	lsls	r3, r1, #2
 80039e0:	4641      	mov	r1, r8
 80039e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e6:	4641      	mov	r1, r8
 80039e8:	008a      	lsls	r2, r1, #2
 80039ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039ee:	f7fc fc67 	bl	80002c0 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	4b38      	ldr	r3, [pc, #224]	@ (8003adc <UART_SetConfig+0x4e4>)
 80039fa:	fba3 2301 	umull	r2, r3, r3, r1
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2264      	movs	r2, #100	@ 0x64
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	1acb      	subs	r3, r1, r3
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	3332      	adds	r3, #50	@ 0x32
 8003a0c:	4a33      	ldr	r2, [pc, #204]	@ (8003adc <UART_SetConfig+0x4e4>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a18:	441c      	add	r4, r3
 8003a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a1e:	2200      	movs	r2, #0
 8003a20:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a22:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	415b      	adcs	r3, r3
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a38:	4641      	mov	r1, r8
 8003a3a:	1851      	adds	r1, r2, r1
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	4649      	mov	r1, r9
 8003a40:	414b      	adcs	r3, r1
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a50:	4659      	mov	r1, fp
 8003a52:	00cb      	lsls	r3, r1, #3
 8003a54:	4651      	mov	r1, sl
 8003a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	00ca      	lsls	r2, r1, #3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	4642      	mov	r2, r8
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	460a      	mov	r2, r1
 8003a6e:	eb42 0303 	adc.w	r3, r2, r3
 8003a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	008b      	lsls	r3, r1, #2
 8003a90:	4641      	mov	r1, r8
 8003a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a96:	4641      	mov	r1, r8
 8003a98:	008a      	lsls	r2, r1, #2
 8003a9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a9e:	f7fc fc0f 	bl	80002c0 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <UART_SetConfig+0x4e4>)
 8003aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	2164      	movs	r1, #100	@ 0x64
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	3332      	adds	r3, #50	@ 0x32
 8003aba:	4a08      	ldr	r2, [pc, #32]	@ (8003adc <UART_SetConfig+0x4e4>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	f003 020f 	and.w	r2, r3, #15
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4422      	add	r2, r4
 8003ace:	609a      	str	r2, [r3, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003adc:	51eb851f 	.word	0x51eb851f

08003ae0 <sniprintf>:
 8003ae0:	b40c      	push	{r2, r3}
 8003ae2:	b530      	push	{r4, r5, lr}
 8003ae4:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <sniprintf+0x64>)
 8003ae6:	1e0c      	subs	r4, r1, #0
 8003ae8:	681d      	ldr	r5, [r3, #0]
 8003aea:	b09d      	sub	sp, #116	@ 0x74
 8003aec:	da08      	bge.n	8003b00 <sniprintf+0x20>
 8003aee:	238b      	movs	r3, #139	@ 0x8b
 8003af0:	602b      	str	r3, [r5, #0]
 8003af2:	f04f 30ff 	mov.w	r0, #4294967295
 8003af6:	b01d      	add	sp, #116	@ 0x74
 8003af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003afc:	b002      	add	sp, #8
 8003afe:	4770      	bx	lr
 8003b00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003b04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b08:	bf14      	ite	ne
 8003b0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b0e:	4623      	moveq	r3, r4
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	9307      	str	r3, [sp, #28]
 8003b14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b18:	9002      	str	r0, [sp, #8]
 8003b1a:	9006      	str	r0, [sp, #24]
 8003b1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b22:	ab21      	add	r3, sp, #132	@ 0x84
 8003b24:	a902      	add	r1, sp, #8
 8003b26:	4628      	mov	r0, r5
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	f000 f995 	bl	8003e58 <_svfiprintf_r>
 8003b2e:	1c43      	adds	r3, r0, #1
 8003b30:	bfbc      	itt	lt
 8003b32:	238b      	movlt	r3, #139	@ 0x8b
 8003b34:	602b      	strlt	r3, [r5, #0]
 8003b36:	2c00      	cmp	r4, #0
 8003b38:	d0dd      	beq.n	8003af6 <sniprintf+0x16>
 8003b3a:	9b02      	ldr	r3, [sp, #8]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	e7d9      	b.n	8003af6 <sniprintf+0x16>
 8003b42:	bf00      	nop
 8003b44:	20000014 	.word	0x20000014

08003b48 <memset>:
 8003b48:	4402      	add	r2, r0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <memset+0xa>
 8003b50:	4770      	bx	lr
 8003b52:	f803 1b01 	strb.w	r1, [r3], #1
 8003b56:	e7f9      	b.n	8003b4c <memset+0x4>

08003b58 <__errno>:
 8003b58:	4b01      	ldr	r3, [pc, #4]	@ (8003b60 <__errno+0x8>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000014 	.word	0x20000014

08003b64 <__libc_init_array>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	4d0d      	ldr	r5, [pc, #52]	@ (8003b9c <__libc_init_array+0x38>)
 8003b68:	4c0d      	ldr	r4, [pc, #52]	@ (8003ba0 <__libc_init_array+0x3c>)
 8003b6a:	1b64      	subs	r4, r4, r5
 8003b6c:	10a4      	asrs	r4, r4, #2
 8003b6e:	2600      	movs	r6, #0
 8003b70:	42a6      	cmp	r6, r4
 8003b72:	d109      	bne.n	8003b88 <__libc_init_array+0x24>
 8003b74:	4d0b      	ldr	r5, [pc, #44]	@ (8003ba4 <__libc_init_array+0x40>)
 8003b76:	4c0c      	ldr	r4, [pc, #48]	@ (8003ba8 <__libc_init_array+0x44>)
 8003b78:	f000 fc66 	bl	8004448 <_init>
 8003b7c:	1b64      	subs	r4, r4, r5
 8003b7e:	10a4      	asrs	r4, r4, #2
 8003b80:	2600      	movs	r6, #0
 8003b82:	42a6      	cmp	r6, r4
 8003b84:	d105      	bne.n	8003b92 <__libc_init_array+0x2e>
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8c:	4798      	blx	r3
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7ee      	b.n	8003b70 <__libc_init_array+0xc>
 8003b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b96:	4798      	blx	r3
 8003b98:	3601      	adds	r6, #1
 8003b9a:	e7f2      	b.n	8003b82 <__libc_init_array+0x1e>
 8003b9c:	080044c8 	.word	0x080044c8
 8003ba0:	080044c8 	.word	0x080044c8
 8003ba4:	080044c8 	.word	0x080044c8
 8003ba8:	080044cc 	.word	0x080044cc

08003bac <__retarget_lock_acquire_recursive>:
 8003bac:	4770      	bx	lr

08003bae <__retarget_lock_release_recursive>:
 8003bae:	4770      	bx	lr

08003bb0 <_free_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4605      	mov	r5, r0
 8003bb4:	2900      	cmp	r1, #0
 8003bb6:	d041      	beq.n	8003c3c <_free_r+0x8c>
 8003bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bbc:	1f0c      	subs	r4, r1, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bfb8      	it	lt
 8003bc2:	18e4      	addlt	r4, r4, r3
 8003bc4:	f000 f8e0 	bl	8003d88 <__malloc_lock>
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c40 <_free_r+0x90>)
 8003bca:	6813      	ldr	r3, [r2, #0]
 8003bcc:	b933      	cbnz	r3, 8003bdc <_free_r+0x2c>
 8003bce:	6063      	str	r3, [r4, #4]
 8003bd0:	6014      	str	r4, [r2, #0]
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bd8:	f000 b8dc 	b.w	8003d94 <__malloc_unlock>
 8003bdc:	42a3      	cmp	r3, r4
 8003bde:	d908      	bls.n	8003bf2 <_free_r+0x42>
 8003be0:	6820      	ldr	r0, [r4, #0]
 8003be2:	1821      	adds	r1, r4, r0
 8003be4:	428b      	cmp	r3, r1
 8003be6:	bf01      	itttt	eq
 8003be8:	6819      	ldreq	r1, [r3, #0]
 8003bea:	685b      	ldreq	r3, [r3, #4]
 8003bec:	1809      	addeq	r1, r1, r0
 8003bee:	6021      	streq	r1, [r4, #0]
 8003bf0:	e7ed      	b.n	8003bce <_free_r+0x1e>
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	b10b      	cbz	r3, 8003bfc <_free_r+0x4c>
 8003bf8:	42a3      	cmp	r3, r4
 8003bfa:	d9fa      	bls.n	8003bf2 <_free_r+0x42>
 8003bfc:	6811      	ldr	r1, [r2, #0]
 8003bfe:	1850      	adds	r0, r2, r1
 8003c00:	42a0      	cmp	r0, r4
 8003c02:	d10b      	bne.n	8003c1c <_free_r+0x6c>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	4401      	add	r1, r0
 8003c08:	1850      	adds	r0, r2, r1
 8003c0a:	4283      	cmp	r3, r0
 8003c0c:	6011      	str	r1, [r2, #0]
 8003c0e:	d1e0      	bne.n	8003bd2 <_free_r+0x22>
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	6053      	str	r3, [r2, #4]
 8003c16:	4408      	add	r0, r1
 8003c18:	6010      	str	r0, [r2, #0]
 8003c1a:	e7da      	b.n	8003bd2 <_free_r+0x22>
 8003c1c:	d902      	bls.n	8003c24 <_free_r+0x74>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	e7d6      	b.n	8003bd2 <_free_r+0x22>
 8003c24:	6820      	ldr	r0, [r4, #0]
 8003c26:	1821      	adds	r1, r4, r0
 8003c28:	428b      	cmp	r3, r1
 8003c2a:	bf04      	itt	eq
 8003c2c:	6819      	ldreq	r1, [r3, #0]
 8003c2e:	685b      	ldreq	r3, [r3, #4]
 8003c30:	6063      	str	r3, [r4, #4]
 8003c32:	bf04      	itt	eq
 8003c34:	1809      	addeq	r1, r1, r0
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	6054      	str	r4, [r2, #4]
 8003c3a:	e7ca      	b.n	8003bd2 <_free_r+0x22>
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000320 	.word	0x20000320

08003c44 <sbrk_aligned>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	4e0f      	ldr	r6, [pc, #60]	@ (8003c84 <sbrk_aligned+0x40>)
 8003c48:	460c      	mov	r4, r1
 8003c4a:	6831      	ldr	r1, [r6, #0]
 8003c4c:	4605      	mov	r5, r0
 8003c4e:	b911      	cbnz	r1, 8003c56 <sbrk_aligned+0x12>
 8003c50:	f000 fba6 	bl	80043a0 <_sbrk_r>
 8003c54:	6030      	str	r0, [r6, #0]
 8003c56:	4621      	mov	r1, r4
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f000 fba1 	bl	80043a0 <_sbrk_r>
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	d103      	bne.n	8003c6a <sbrk_aligned+0x26>
 8003c62:	f04f 34ff 	mov.w	r4, #4294967295
 8003c66:	4620      	mov	r0, r4
 8003c68:	bd70      	pop	{r4, r5, r6, pc}
 8003c6a:	1cc4      	adds	r4, r0, #3
 8003c6c:	f024 0403 	bic.w	r4, r4, #3
 8003c70:	42a0      	cmp	r0, r4
 8003c72:	d0f8      	beq.n	8003c66 <sbrk_aligned+0x22>
 8003c74:	1a21      	subs	r1, r4, r0
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 fb92 	bl	80043a0 <_sbrk_r>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d1f2      	bne.n	8003c66 <sbrk_aligned+0x22>
 8003c80:	e7ef      	b.n	8003c62 <sbrk_aligned+0x1e>
 8003c82:	bf00      	nop
 8003c84:	2000031c 	.word	0x2000031c

08003c88 <_malloc_r>:
 8003c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8c:	1ccd      	adds	r5, r1, #3
 8003c8e:	f025 0503 	bic.w	r5, r5, #3
 8003c92:	3508      	adds	r5, #8
 8003c94:	2d0c      	cmp	r5, #12
 8003c96:	bf38      	it	cc
 8003c98:	250c      	movcc	r5, #12
 8003c9a:	2d00      	cmp	r5, #0
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	db01      	blt.n	8003ca4 <_malloc_r+0x1c>
 8003ca0:	42a9      	cmp	r1, r5
 8003ca2:	d904      	bls.n	8003cae <_malloc_r+0x26>
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	6033      	str	r3, [r6, #0]
 8003ca8:	2000      	movs	r0, #0
 8003caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d84 <_malloc_r+0xfc>
 8003cb2:	f000 f869 	bl	8003d88 <__malloc_lock>
 8003cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cba:	461c      	mov	r4, r3
 8003cbc:	bb44      	cbnz	r4, 8003d10 <_malloc_r+0x88>
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	f7ff ffbf 	bl	8003c44 <sbrk_aligned>
 8003cc6:	1c43      	adds	r3, r0, #1
 8003cc8:	4604      	mov	r4, r0
 8003cca:	d158      	bne.n	8003d7e <_malloc_r+0xf6>
 8003ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8003cd0:	4627      	mov	r7, r4
 8003cd2:	2f00      	cmp	r7, #0
 8003cd4:	d143      	bne.n	8003d5e <_malloc_r+0xd6>
 8003cd6:	2c00      	cmp	r4, #0
 8003cd8:	d04b      	beq.n	8003d72 <_malloc_r+0xea>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	4639      	mov	r1, r7
 8003cde:	4630      	mov	r0, r6
 8003ce0:	eb04 0903 	add.w	r9, r4, r3
 8003ce4:	f000 fb5c 	bl	80043a0 <_sbrk_r>
 8003ce8:	4581      	cmp	r9, r0
 8003cea:	d142      	bne.n	8003d72 <_malloc_r+0xea>
 8003cec:	6821      	ldr	r1, [r4, #0]
 8003cee:	1a6d      	subs	r5, r5, r1
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f7ff ffa6 	bl	8003c44 <sbrk_aligned>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d03a      	beq.n	8003d72 <_malloc_r+0xea>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	442b      	add	r3, r5
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	f8d8 3000 	ldr.w	r3, [r8]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	bb62      	cbnz	r2, 8003d64 <_malloc_r+0xdc>
 8003d0a:	f8c8 7000 	str.w	r7, [r8]
 8003d0e:	e00f      	b.n	8003d30 <_malloc_r+0xa8>
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	1b52      	subs	r2, r2, r5
 8003d14:	d420      	bmi.n	8003d58 <_malloc_r+0xd0>
 8003d16:	2a0b      	cmp	r2, #11
 8003d18:	d917      	bls.n	8003d4a <_malloc_r+0xc2>
 8003d1a:	1961      	adds	r1, r4, r5
 8003d1c:	42a3      	cmp	r3, r4
 8003d1e:	6025      	str	r5, [r4, #0]
 8003d20:	bf18      	it	ne
 8003d22:	6059      	strne	r1, [r3, #4]
 8003d24:	6863      	ldr	r3, [r4, #4]
 8003d26:	bf08      	it	eq
 8003d28:	f8c8 1000 	streq.w	r1, [r8]
 8003d2c:	5162      	str	r2, [r4, r5]
 8003d2e:	604b      	str	r3, [r1, #4]
 8003d30:	4630      	mov	r0, r6
 8003d32:	f000 f82f 	bl	8003d94 <__malloc_unlock>
 8003d36:	f104 000b 	add.w	r0, r4, #11
 8003d3a:	1d23      	adds	r3, r4, #4
 8003d3c:	f020 0007 	bic.w	r0, r0, #7
 8003d40:	1ac2      	subs	r2, r0, r3
 8003d42:	bf1c      	itt	ne
 8003d44:	1a1b      	subne	r3, r3, r0
 8003d46:	50a3      	strne	r3, [r4, r2]
 8003d48:	e7af      	b.n	8003caa <_malloc_r+0x22>
 8003d4a:	6862      	ldr	r2, [r4, #4]
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	bf0c      	ite	eq
 8003d50:	f8c8 2000 	streq.w	r2, [r8]
 8003d54:	605a      	strne	r2, [r3, #4]
 8003d56:	e7eb      	b.n	8003d30 <_malloc_r+0xa8>
 8003d58:	4623      	mov	r3, r4
 8003d5a:	6864      	ldr	r4, [r4, #4]
 8003d5c:	e7ae      	b.n	8003cbc <_malloc_r+0x34>
 8003d5e:	463c      	mov	r4, r7
 8003d60:	687f      	ldr	r7, [r7, #4]
 8003d62:	e7b6      	b.n	8003cd2 <_malloc_r+0x4a>
 8003d64:	461a      	mov	r2, r3
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d1fb      	bne.n	8003d64 <_malloc_r+0xdc>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6053      	str	r3, [r2, #4]
 8003d70:	e7de      	b.n	8003d30 <_malloc_r+0xa8>
 8003d72:	230c      	movs	r3, #12
 8003d74:	6033      	str	r3, [r6, #0]
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 f80c 	bl	8003d94 <__malloc_unlock>
 8003d7c:	e794      	b.n	8003ca8 <_malloc_r+0x20>
 8003d7e:	6005      	str	r5, [r0, #0]
 8003d80:	e7d6      	b.n	8003d30 <_malloc_r+0xa8>
 8003d82:	bf00      	nop
 8003d84:	20000320 	.word	0x20000320

08003d88 <__malloc_lock>:
 8003d88:	4801      	ldr	r0, [pc, #4]	@ (8003d90 <__malloc_lock+0x8>)
 8003d8a:	f7ff bf0f 	b.w	8003bac <__retarget_lock_acquire_recursive>
 8003d8e:	bf00      	nop
 8003d90:	20000318 	.word	0x20000318

08003d94 <__malloc_unlock>:
 8003d94:	4801      	ldr	r0, [pc, #4]	@ (8003d9c <__malloc_unlock+0x8>)
 8003d96:	f7ff bf0a 	b.w	8003bae <__retarget_lock_release_recursive>
 8003d9a:	bf00      	nop
 8003d9c:	20000318 	.word	0x20000318

08003da0 <__ssputs_r>:
 8003da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da4:	688e      	ldr	r6, [r1, #8]
 8003da6:	461f      	mov	r7, r3
 8003da8:	42be      	cmp	r6, r7
 8003daa:	680b      	ldr	r3, [r1, #0]
 8003dac:	4682      	mov	sl, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	4690      	mov	r8, r2
 8003db2:	d82d      	bhi.n	8003e10 <__ssputs_r+0x70>
 8003db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003db8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003dbc:	d026      	beq.n	8003e0c <__ssputs_r+0x6c>
 8003dbe:	6965      	ldr	r5, [r4, #20]
 8003dc0:	6909      	ldr	r1, [r1, #16]
 8003dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dc6:	eba3 0901 	sub.w	r9, r3, r1
 8003dca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dce:	1c7b      	adds	r3, r7, #1
 8003dd0:	444b      	add	r3, r9
 8003dd2:	106d      	asrs	r5, r5, #1
 8003dd4:	429d      	cmp	r5, r3
 8003dd6:	bf38      	it	cc
 8003dd8:	461d      	movcc	r5, r3
 8003dda:	0553      	lsls	r3, r2, #21
 8003ddc:	d527      	bpl.n	8003e2e <__ssputs_r+0x8e>
 8003dde:	4629      	mov	r1, r5
 8003de0:	f7ff ff52 	bl	8003c88 <_malloc_r>
 8003de4:	4606      	mov	r6, r0
 8003de6:	b360      	cbz	r0, 8003e42 <__ssputs_r+0xa2>
 8003de8:	6921      	ldr	r1, [r4, #16]
 8003dea:	464a      	mov	r2, r9
 8003dec:	f000 fae8 	bl	80043c0 <memcpy>
 8003df0:	89a3      	ldrh	r3, [r4, #12]
 8003df2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dfa:	81a3      	strh	r3, [r4, #12]
 8003dfc:	6126      	str	r6, [r4, #16]
 8003dfe:	6165      	str	r5, [r4, #20]
 8003e00:	444e      	add	r6, r9
 8003e02:	eba5 0509 	sub.w	r5, r5, r9
 8003e06:	6026      	str	r6, [r4, #0]
 8003e08:	60a5      	str	r5, [r4, #8]
 8003e0a:	463e      	mov	r6, r7
 8003e0c:	42be      	cmp	r6, r7
 8003e0e:	d900      	bls.n	8003e12 <__ssputs_r+0x72>
 8003e10:	463e      	mov	r6, r7
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	4632      	mov	r2, r6
 8003e16:	4641      	mov	r1, r8
 8003e18:	f000 faa8 	bl	800436c <memmove>
 8003e1c:	68a3      	ldr	r3, [r4, #8]
 8003e1e:	1b9b      	subs	r3, r3, r6
 8003e20:	60a3      	str	r3, [r4, #8]
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	4433      	add	r3, r6
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2e:	462a      	mov	r2, r5
 8003e30:	f000 fad4 	bl	80043dc <_realloc_r>
 8003e34:	4606      	mov	r6, r0
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d1e0      	bne.n	8003dfc <__ssputs_r+0x5c>
 8003e3a:	6921      	ldr	r1, [r4, #16]
 8003e3c:	4650      	mov	r0, sl
 8003e3e:	f7ff feb7 	bl	8003bb0 <_free_r>
 8003e42:	230c      	movs	r3, #12
 8003e44:	f8ca 3000 	str.w	r3, [sl]
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e4e:	81a3      	strh	r3, [r4, #12]
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	e7e9      	b.n	8003e2a <__ssputs_r+0x8a>
	...

08003e58 <_svfiprintf_r>:
 8003e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5c:	4698      	mov	r8, r3
 8003e5e:	898b      	ldrh	r3, [r1, #12]
 8003e60:	061b      	lsls	r3, r3, #24
 8003e62:	b09d      	sub	sp, #116	@ 0x74
 8003e64:	4607      	mov	r7, r0
 8003e66:	460d      	mov	r5, r1
 8003e68:	4614      	mov	r4, r2
 8003e6a:	d510      	bpl.n	8003e8e <_svfiprintf_r+0x36>
 8003e6c:	690b      	ldr	r3, [r1, #16]
 8003e6e:	b973      	cbnz	r3, 8003e8e <_svfiprintf_r+0x36>
 8003e70:	2140      	movs	r1, #64	@ 0x40
 8003e72:	f7ff ff09 	bl	8003c88 <_malloc_r>
 8003e76:	6028      	str	r0, [r5, #0]
 8003e78:	6128      	str	r0, [r5, #16]
 8003e7a:	b930      	cbnz	r0, 8003e8a <_svfiprintf_r+0x32>
 8003e7c:	230c      	movs	r3, #12
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	b01d      	add	sp, #116	@ 0x74
 8003e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8a:	2340      	movs	r3, #64	@ 0x40
 8003e8c:	616b      	str	r3, [r5, #20]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e92:	2320      	movs	r3, #32
 8003e94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e9c:	2330      	movs	r3, #48	@ 0x30
 8003e9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800403c <_svfiprintf_r+0x1e4>
 8003ea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ea6:	f04f 0901 	mov.w	r9, #1
 8003eaa:	4623      	mov	r3, r4
 8003eac:	469a      	mov	sl, r3
 8003eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eb2:	b10a      	cbz	r2, 8003eb8 <_svfiprintf_r+0x60>
 8003eb4:	2a25      	cmp	r2, #37	@ 0x25
 8003eb6:	d1f9      	bne.n	8003eac <_svfiprintf_r+0x54>
 8003eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8003ebc:	d00b      	beq.n	8003ed6 <_svfiprintf_r+0x7e>
 8003ebe:	465b      	mov	r3, fp
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff ff6b 	bl	8003da0 <__ssputs_r>
 8003eca:	3001      	adds	r0, #1
 8003ecc:	f000 80a7 	beq.w	800401e <_svfiprintf_r+0x1c6>
 8003ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ed2:	445a      	add	r2, fp
 8003ed4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 809f 	beq.w	800401e <_svfiprintf_r+0x1c6>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eea:	f10a 0a01 	add.w	sl, sl, #1
 8003eee:	9304      	str	r3, [sp, #16]
 8003ef0:	9307      	str	r3, [sp, #28]
 8003ef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ef6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ef8:	4654      	mov	r4, sl
 8003efa:	2205      	movs	r2, #5
 8003efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f00:	484e      	ldr	r0, [pc, #312]	@ (800403c <_svfiprintf_r+0x1e4>)
 8003f02:	f7fc f98d 	bl	8000220 <memchr>
 8003f06:	9a04      	ldr	r2, [sp, #16]
 8003f08:	b9d8      	cbnz	r0, 8003f42 <_svfiprintf_r+0xea>
 8003f0a:	06d0      	lsls	r0, r2, #27
 8003f0c:	bf44      	itt	mi
 8003f0e:	2320      	movmi	r3, #32
 8003f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f14:	0711      	lsls	r1, r2, #28
 8003f16:	bf44      	itt	mi
 8003f18:	232b      	movmi	r3, #43	@ 0x2b
 8003f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f24:	d015      	beq.n	8003f52 <_svfiprintf_r+0xfa>
 8003f26:	9a07      	ldr	r2, [sp, #28]
 8003f28:	4654      	mov	r4, sl
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f04f 0c0a 	mov.w	ip, #10
 8003f30:	4621      	mov	r1, r4
 8003f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f36:	3b30      	subs	r3, #48	@ 0x30
 8003f38:	2b09      	cmp	r3, #9
 8003f3a:	d94b      	bls.n	8003fd4 <_svfiprintf_r+0x17c>
 8003f3c:	b1b0      	cbz	r0, 8003f6c <_svfiprintf_r+0x114>
 8003f3e:	9207      	str	r2, [sp, #28]
 8003f40:	e014      	b.n	8003f6c <_svfiprintf_r+0x114>
 8003f42:	eba0 0308 	sub.w	r3, r0, r8
 8003f46:	fa09 f303 	lsl.w	r3, r9, r3
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	9304      	str	r3, [sp, #16]
 8003f4e:	46a2      	mov	sl, r4
 8003f50:	e7d2      	b.n	8003ef8 <_svfiprintf_r+0xa0>
 8003f52:	9b03      	ldr	r3, [sp, #12]
 8003f54:	1d19      	adds	r1, r3, #4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	9103      	str	r1, [sp, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bfbb      	ittet	lt
 8003f5e:	425b      	neglt	r3, r3
 8003f60:	f042 0202 	orrlt.w	r2, r2, #2
 8003f64:	9307      	strge	r3, [sp, #28]
 8003f66:	9307      	strlt	r3, [sp, #28]
 8003f68:	bfb8      	it	lt
 8003f6a:	9204      	strlt	r2, [sp, #16]
 8003f6c:	7823      	ldrb	r3, [r4, #0]
 8003f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f70:	d10a      	bne.n	8003f88 <_svfiprintf_r+0x130>
 8003f72:	7863      	ldrb	r3, [r4, #1]
 8003f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f76:	d132      	bne.n	8003fde <_svfiprintf_r+0x186>
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	9203      	str	r2, [sp, #12]
 8003f80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f84:	3402      	adds	r4, #2
 8003f86:	9305      	str	r3, [sp, #20]
 8003f88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800404c <_svfiprintf_r+0x1f4>
 8003f8c:	7821      	ldrb	r1, [r4, #0]
 8003f8e:	2203      	movs	r2, #3
 8003f90:	4650      	mov	r0, sl
 8003f92:	f7fc f945 	bl	8000220 <memchr>
 8003f96:	b138      	cbz	r0, 8003fa8 <_svfiprintf_r+0x150>
 8003f98:	9b04      	ldr	r3, [sp, #16]
 8003f9a:	eba0 000a 	sub.w	r0, r0, sl
 8003f9e:	2240      	movs	r2, #64	@ 0x40
 8003fa0:	4082      	lsls	r2, r0
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	3401      	adds	r4, #1
 8003fa6:	9304      	str	r3, [sp, #16]
 8003fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fac:	4824      	ldr	r0, [pc, #144]	@ (8004040 <_svfiprintf_r+0x1e8>)
 8003fae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fb2:	2206      	movs	r2, #6
 8003fb4:	f7fc f934 	bl	8000220 <memchr>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d036      	beq.n	800402a <_svfiprintf_r+0x1d2>
 8003fbc:	4b21      	ldr	r3, [pc, #132]	@ (8004044 <_svfiprintf_r+0x1ec>)
 8003fbe:	bb1b      	cbnz	r3, 8004008 <_svfiprintf_r+0x1b0>
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	3307      	adds	r3, #7
 8003fc4:	f023 0307 	bic.w	r3, r3, #7
 8003fc8:	3308      	adds	r3, #8
 8003fca:	9303      	str	r3, [sp, #12]
 8003fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fce:	4433      	add	r3, r6
 8003fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fd2:	e76a      	b.n	8003eaa <_svfiprintf_r+0x52>
 8003fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fd8:	460c      	mov	r4, r1
 8003fda:	2001      	movs	r0, #1
 8003fdc:	e7a8      	b.n	8003f30 <_svfiprintf_r+0xd8>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	3401      	adds	r4, #1
 8003fe2:	9305      	str	r3, [sp, #20]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f04f 0c0a 	mov.w	ip, #10
 8003fea:	4620      	mov	r0, r4
 8003fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ff0:	3a30      	subs	r2, #48	@ 0x30
 8003ff2:	2a09      	cmp	r2, #9
 8003ff4:	d903      	bls.n	8003ffe <_svfiprintf_r+0x1a6>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0c6      	beq.n	8003f88 <_svfiprintf_r+0x130>
 8003ffa:	9105      	str	r1, [sp, #20]
 8003ffc:	e7c4      	b.n	8003f88 <_svfiprintf_r+0x130>
 8003ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004002:	4604      	mov	r4, r0
 8004004:	2301      	movs	r3, #1
 8004006:	e7f0      	b.n	8003fea <_svfiprintf_r+0x192>
 8004008:	ab03      	add	r3, sp, #12
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	462a      	mov	r2, r5
 800400e:	4b0e      	ldr	r3, [pc, #56]	@ (8004048 <_svfiprintf_r+0x1f0>)
 8004010:	a904      	add	r1, sp, #16
 8004012:	4638      	mov	r0, r7
 8004014:	f3af 8000 	nop.w
 8004018:	1c42      	adds	r2, r0, #1
 800401a:	4606      	mov	r6, r0
 800401c:	d1d6      	bne.n	8003fcc <_svfiprintf_r+0x174>
 800401e:	89ab      	ldrh	r3, [r5, #12]
 8004020:	065b      	lsls	r3, r3, #25
 8004022:	f53f af2d 	bmi.w	8003e80 <_svfiprintf_r+0x28>
 8004026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004028:	e72c      	b.n	8003e84 <_svfiprintf_r+0x2c>
 800402a:	ab03      	add	r3, sp, #12
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	462a      	mov	r2, r5
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <_svfiprintf_r+0x1f0>)
 8004032:	a904      	add	r1, sp, #16
 8004034:	4638      	mov	r0, r7
 8004036:	f000 f879 	bl	800412c <_printf_i>
 800403a:	e7ed      	b.n	8004018 <_svfiprintf_r+0x1c0>
 800403c:	0800448c 	.word	0x0800448c
 8004040:	08004496 	.word	0x08004496
 8004044:	00000000 	.word	0x00000000
 8004048:	08003da1 	.word	0x08003da1
 800404c:	08004492 	.word	0x08004492

08004050 <_printf_common>:
 8004050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004054:	4616      	mov	r6, r2
 8004056:	4698      	mov	r8, r3
 8004058:	688a      	ldr	r2, [r1, #8]
 800405a:	690b      	ldr	r3, [r1, #16]
 800405c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004060:	4293      	cmp	r3, r2
 8004062:	bfb8      	it	lt
 8004064:	4613      	movlt	r3, r2
 8004066:	6033      	str	r3, [r6, #0]
 8004068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800406c:	4607      	mov	r7, r0
 800406e:	460c      	mov	r4, r1
 8004070:	b10a      	cbz	r2, 8004076 <_printf_common+0x26>
 8004072:	3301      	adds	r3, #1
 8004074:	6033      	str	r3, [r6, #0]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	0699      	lsls	r1, r3, #26
 800407a:	bf42      	ittt	mi
 800407c:	6833      	ldrmi	r3, [r6, #0]
 800407e:	3302      	addmi	r3, #2
 8004080:	6033      	strmi	r3, [r6, #0]
 8004082:	6825      	ldr	r5, [r4, #0]
 8004084:	f015 0506 	ands.w	r5, r5, #6
 8004088:	d106      	bne.n	8004098 <_printf_common+0x48>
 800408a:	f104 0a19 	add.w	sl, r4, #25
 800408e:	68e3      	ldr	r3, [r4, #12]
 8004090:	6832      	ldr	r2, [r6, #0]
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	42ab      	cmp	r3, r5
 8004096:	dc26      	bgt.n	80040e6 <_printf_common+0x96>
 8004098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800409c:	6822      	ldr	r2, [r4, #0]
 800409e:	3b00      	subs	r3, #0
 80040a0:	bf18      	it	ne
 80040a2:	2301      	movne	r3, #1
 80040a4:	0692      	lsls	r2, r2, #26
 80040a6:	d42b      	bmi.n	8004100 <_printf_common+0xb0>
 80040a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040ac:	4641      	mov	r1, r8
 80040ae:	4638      	mov	r0, r7
 80040b0:	47c8      	blx	r9
 80040b2:	3001      	adds	r0, #1
 80040b4:	d01e      	beq.n	80040f4 <_printf_common+0xa4>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	6922      	ldr	r2, [r4, #16]
 80040ba:	f003 0306 	and.w	r3, r3, #6
 80040be:	2b04      	cmp	r3, #4
 80040c0:	bf02      	ittt	eq
 80040c2:	68e5      	ldreq	r5, [r4, #12]
 80040c4:	6833      	ldreq	r3, [r6, #0]
 80040c6:	1aed      	subeq	r5, r5, r3
 80040c8:	68a3      	ldr	r3, [r4, #8]
 80040ca:	bf0c      	ite	eq
 80040cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040d0:	2500      	movne	r5, #0
 80040d2:	4293      	cmp	r3, r2
 80040d4:	bfc4      	itt	gt
 80040d6:	1a9b      	subgt	r3, r3, r2
 80040d8:	18ed      	addgt	r5, r5, r3
 80040da:	2600      	movs	r6, #0
 80040dc:	341a      	adds	r4, #26
 80040de:	42b5      	cmp	r5, r6
 80040e0:	d11a      	bne.n	8004118 <_printf_common+0xc8>
 80040e2:	2000      	movs	r0, #0
 80040e4:	e008      	b.n	80040f8 <_printf_common+0xa8>
 80040e6:	2301      	movs	r3, #1
 80040e8:	4652      	mov	r2, sl
 80040ea:	4641      	mov	r1, r8
 80040ec:	4638      	mov	r0, r7
 80040ee:	47c8      	blx	r9
 80040f0:	3001      	adds	r0, #1
 80040f2:	d103      	bne.n	80040fc <_printf_common+0xac>
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fc:	3501      	adds	r5, #1
 80040fe:	e7c6      	b.n	800408e <_printf_common+0x3e>
 8004100:	18e1      	adds	r1, r4, r3
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	2030      	movs	r0, #48	@ 0x30
 8004106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800410a:	4422      	add	r2, r4
 800410c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004114:	3302      	adds	r3, #2
 8004116:	e7c7      	b.n	80040a8 <_printf_common+0x58>
 8004118:	2301      	movs	r3, #1
 800411a:	4622      	mov	r2, r4
 800411c:	4641      	mov	r1, r8
 800411e:	4638      	mov	r0, r7
 8004120:	47c8      	blx	r9
 8004122:	3001      	adds	r0, #1
 8004124:	d0e6      	beq.n	80040f4 <_printf_common+0xa4>
 8004126:	3601      	adds	r6, #1
 8004128:	e7d9      	b.n	80040de <_printf_common+0x8e>
	...

0800412c <_printf_i>:
 800412c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004130:	7e0f      	ldrb	r7, [r1, #24]
 8004132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004134:	2f78      	cmp	r7, #120	@ 0x78
 8004136:	4691      	mov	r9, r2
 8004138:	4680      	mov	r8, r0
 800413a:	460c      	mov	r4, r1
 800413c:	469a      	mov	sl, r3
 800413e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004142:	d807      	bhi.n	8004154 <_printf_i+0x28>
 8004144:	2f62      	cmp	r7, #98	@ 0x62
 8004146:	d80a      	bhi.n	800415e <_printf_i+0x32>
 8004148:	2f00      	cmp	r7, #0
 800414a:	f000 80d2 	beq.w	80042f2 <_printf_i+0x1c6>
 800414e:	2f58      	cmp	r7, #88	@ 0x58
 8004150:	f000 80b9 	beq.w	80042c6 <_printf_i+0x19a>
 8004154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800415c:	e03a      	b.n	80041d4 <_printf_i+0xa8>
 800415e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004162:	2b15      	cmp	r3, #21
 8004164:	d8f6      	bhi.n	8004154 <_printf_i+0x28>
 8004166:	a101      	add	r1, pc, #4	@ (adr r1, 800416c <_printf_i+0x40>)
 8004168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800416c:	080041c5 	.word	0x080041c5
 8004170:	080041d9 	.word	0x080041d9
 8004174:	08004155 	.word	0x08004155
 8004178:	08004155 	.word	0x08004155
 800417c:	08004155 	.word	0x08004155
 8004180:	08004155 	.word	0x08004155
 8004184:	080041d9 	.word	0x080041d9
 8004188:	08004155 	.word	0x08004155
 800418c:	08004155 	.word	0x08004155
 8004190:	08004155 	.word	0x08004155
 8004194:	08004155 	.word	0x08004155
 8004198:	080042d9 	.word	0x080042d9
 800419c:	08004203 	.word	0x08004203
 80041a0:	08004293 	.word	0x08004293
 80041a4:	08004155 	.word	0x08004155
 80041a8:	08004155 	.word	0x08004155
 80041ac:	080042fb 	.word	0x080042fb
 80041b0:	08004155 	.word	0x08004155
 80041b4:	08004203 	.word	0x08004203
 80041b8:	08004155 	.word	0x08004155
 80041bc:	08004155 	.word	0x08004155
 80041c0:	0800429b 	.word	0x0800429b
 80041c4:	6833      	ldr	r3, [r6, #0]
 80041c6:	1d1a      	adds	r2, r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6032      	str	r2, [r6, #0]
 80041cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041d4:	2301      	movs	r3, #1
 80041d6:	e09d      	b.n	8004314 <_printf_i+0x1e8>
 80041d8:	6833      	ldr	r3, [r6, #0]
 80041da:	6820      	ldr	r0, [r4, #0]
 80041dc:	1d19      	adds	r1, r3, #4
 80041de:	6031      	str	r1, [r6, #0]
 80041e0:	0606      	lsls	r6, r0, #24
 80041e2:	d501      	bpl.n	80041e8 <_printf_i+0xbc>
 80041e4:	681d      	ldr	r5, [r3, #0]
 80041e6:	e003      	b.n	80041f0 <_printf_i+0xc4>
 80041e8:	0645      	lsls	r5, r0, #25
 80041ea:	d5fb      	bpl.n	80041e4 <_printf_i+0xb8>
 80041ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041f0:	2d00      	cmp	r5, #0
 80041f2:	da03      	bge.n	80041fc <_printf_i+0xd0>
 80041f4:	232d      	movs	r3, #45	@ 0x2d
 80041f6:	426d      	negs	r5, r5
 80041f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041fc:	4859      	ldr	r0, [pc, #356]	@ (8004364 <_printf_i+0x238>)
 80041fe:	230a      	movs	r3, #10
 8004200:	e011      	b.n	8004226 <_printf_i+0xfa>
 8004202:	6821      	ldr	r1, [r4, #0]
 8004204:	6833      	ldr	r3, [r6, #0]
 8004206:	0608      	lsls	r0, r1, #24
 8004208:	f853 5b04 	ldr.w	r5, [r3], #4
 800420c:	d402      	bmi.n	8004214 <_printf_i+0xe8>
 800420e:	0649      	lsls	r1, r1, #25
 8004210:	bf48      	it	mi
 8004212:	b2ad      	uxthmi	r5, r5
 8004214:	2f6f      	cmp	r7, #111	@ 0x6f
 8004216:	4853      	ldr	r0, [pc, #332]	@ (8004364 <_printf_i+0x238>)
 8004218:	6033      	str	r3, [r6, #0]
 800421a:	bf14      	ite	ne
 800421c:	230a      	movne	r3, #10
 800421e:	2308      	moveq	r3, #8
 8004220:	2100      	movs	r1, #0
 8004222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004226:	6866      	ldr	r6, [r4, #4]
 8004228:	60a6      	str	r6, [r4, #8]
 800422a:	2e00      	cmp	r6, #0
 800422c:	bfa2      	ittt	ge
 800422e:	6821      	ldrge	r1, [r4, #0]
 8004230:	f021 0104 	bicge.w	r1, r1, #4
 8004234:	6021      	strge	r1, [r4, #0]
 8004236:	b90d      	cbnz	r5, 800423c <_printf_i+0x110>
 8004238:	2e00      	cmp	r6, #0
 800423a:	d04b      	beq.n	80042d4 <_printf_i+0x1a8>
 800423c:	4616      	mov	r6, r2
 800423e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004242:	fb03 5711 	mls	r7, r3, r1, r5
 8004246:	5dc7      	ldrb	r7, [r0, r7]
 8004248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800424c:	462f      	mov	r7, r5
 800424e:	42bb      	cmp	r3, r7
 8004250:	460d      	mov	r5, r1
 8004252:	d9f4      	bls.n	800423e <_printf_i+0x112>
 8004254:	2b08      	cmp	r3, #8
 8004256:	d10b      	bne.n	8004270 <_printf_i+0x144>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	07df      	lsls	r7, r3, #31
 800425c:	d508      	bpl.n	8004270 <_printf_i+0x144>
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	6861      	ldr	r1, [r4, #4]
 8004262:	4299      	cmp	r1, r3
 8004264:	bfde      	ittt	le
 8004266:	2330      	movle	r3, #48	@ 0x30
 8004268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800426c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004270:	1b92      	subs	r2, r2, r6
 8004272:	6122      	str	r2, [r4, #16]
 8004274:	f8cd a000 	str.w	sl, [sp]
 8004278:	464b      	mov	r3, r9
 800427a:	aa03      	add	r2, sp, #12
 800427c:	4621      	mov	r1, r4
 800427e:	4640      	mov	r0, r8
 8004280:	f7ff fee6 	bl	8004050 <_printf_common>
 8004284:	3001      	adds	r0, #1
 8004286:	d14a      	bne.n	800431e <_printf_i+0x1f2>
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	b004      	add	sp, #16
 800428e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	f043 0320 	orr.w	r3, r3, #32
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	4833      	ldr	r0, [pc, #204]	@ (8004368 <_printf_i+0x23c>)
 800429c:	2778      	movs	r7, #120	@ 0x78
 800429e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	6831      	ldr	r1, [r6, #0]
 80042a6:	061f      	lsls	r7, r3, #24
 80042a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80042ac:	d402      	bmi.n	80042b4 <_printf_i+0x188>
 80042ae:	065f      	lsls	r7, r3, #25
 80042b0:	bf48      	it	mi
 80042b2:	b2ad      	uxthmi	r5, r5
 80042b4:	6031      	str	r1, [r6, #0]
 80042b6:	07d9      	lsls	r1, r3, #31
 80042b8:	bf44      	itt	mi
 80042ba:	f043 0320 	orrmi.w	r3, r3, #32
 80042be:	6023      	strmi	r3, [r4, #0]
 80042c0:	b11d      	cbz	r5, 80042ca <_printf_i+0x19e>
 80042c2:	2310      	movs	r3, #16
 80042c4:	e7ac      	b.n	8004220 <_printf_i+0xf4>
 80042c6:	4827      	ldr	r0, [pc, #156]	@ (8004364 <_printf_i+0x238>)
 80042c8:	e7e9      	b.n	800429e <_printf_i+0x172>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	f023 0320 	bic.w	r3, r3, #32
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	e7f6      	b.n	80042c2 <_printf_i+0x196>
 80042d4:	4616      	mov	r6, r2
 80042d6:	e7bd      	b.n	8004254 <_printf_i+0x128>
 80042d8:	6833      	ldr	r3, [r6, #0]
 80042da:	6825      	ldr	r5, [r4, #0]
 80042dc:	6961      	ldr	r1, [r4, #20]
 80042de:	1d18      	adds	r0, r3, #4
 80042e0:	6030      	str	r0, [r6, #0]
 80042e2:	062e      	lsls	r6, r5, #24
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	d501      	bpl.n	80042ec <_printf_i+0x1c0>
 80042e8:	6019      	str	r1, [r3, #0]
 80042ea:	e002      	b.n	80042f2 <_printf_i+0x1c6>
 80042ec:	0668      	lsls	r0, r5, #25
 80042ee:	d5fb      	bpl.n	80042e8 <_printf_i+0x1bc>
 80042f0:	8019      	strh	r1, [r3, #0]
 80042f2:	2300      	movs	r3, #0
 80042f4:	6123      	str	r3, [r4, #16]
 80042f6:	4616      	mov	r6, r2
 80042f8:	e7bc      	b.n	8004274 <_printf_i+0x148>
 80042fa:	6833      	ldr	r3, [r6, #0]
 80042fc:	1d1a      	adds	r2, r3, #4
 80042fe:	6032      	str	r2, [r6, #0]
 8004300:	681e      	ldr	r6, [r3, #0]
 8004302:	6862      	ldr	r2, [r4, #4]
 8004304:	2100      	movs	r1, #0
 8004306:	4630      	mov	r0, r6
 8004308:	f7fb ff8a 	bl	8000220 <memchr>
 800430c:	b108      	cbz	r0, 8004312 <_printf_i+0x1e6>
 800430e:	1b80      	subs	r0, r0, r6
 8004310:	6060      	str	r0, [r4, #4]
 8004312:	6863      	ldr	r3, [r4, #4]
 8004314:	6123      	str	r3, [r4, #16]
 8004316:	2300      	movs	r3, #0
 8004318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800431c:	e7aa      	b.n	8004274 <_printf_i+0x148>
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	4632      	mov	r2, r6
 8004322:	4649      	mov	r1, r9
 8004324:	4640      	mov	r0, r8
 8004326:	47d0      	blx	sl
 8004328:	3001      	adds	r0, #1
 800432a:	d0ad      	beq.n	8004288 <_printf_i+0x15c>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	079b      	lsls	r3, r3, #30
 8004330:	d413      	bmi.n	800435a <_printf_i+0x22e>
 8004332:	68e0      	ldr	r0, [r4, #12]
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	4298      	cmp	r0, r3
 8004338:	bfb8      	it	lt
 800433a:	4618      	movlt	r0, r3
 800433c:	e7a6      	b.n	800428c <_printf_i+0x160>
 800433e:	2301      	movs	r3, #1
 8004340:	4632      	mov	r2, r6
 8004342:	4649      	mov	r1, r9
 8004344:	4640      	mov	r0, r8
 8004346:	47d0      	blx	sl
 8004348:	3001      	adds	r0, #1
 800434a:	d09d      	beq.n	8004288 <_printf_i+0x15c>
 800434c:	3501      	adds	r5, #1
 800434e:	68e3      	ldr	r3, [r4, #12]
 8004350:	9903      	ldr	r1, [sp, #12]
 8004352:	1a5b      	subs	r3, r3, r1
 8004354:	42ab      	cmp	r3, r5
 8004356:	dcf2      	bgt.n	800433e <_printf_i+0x212>
 8004358:	e7eb      	b.n	8004332 <_printf_i+0x206>
 800435a:	2500      	movs	r5, #0
 800435c:	f104 0619 	add.w	r6, r4, #25
 8004360:	e7f5      	b.n	800434e <_printf_i+0x222>
 8004362:	bf00      	nop
 8004364:	0800449d 	.word	0x0800449d
 8004368:	080044ae 	.word	0x080044ae

0800436c <memmove>:
 800436c:	4288      	cmp	r0, r1
 800436e:	b510      	push	{r4, lr}
 8004370:	eb01 0402 	add.w	r4, r1, r2
 8004374:	d902      	bls.n	800437c <memmove+0x10>
 8004376:	4284      	cmp	r4, r0
 8004378:	4623      	mov	r3, r4
 800437a:	d807      	bhi.n	800438c <memmove+0x20>
 800437c:	1e43      	subs	r3, r0, #1
 800437e:	42a1      	cmp	r1, r4
 8004380:	d008      	beq.n	8004394 <memmove+0x28>
 8004382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800438a:	e7f8      	b.n	800437e <memmove+0x12>
 800438c:	4402      	add	r2, r0
 800438e:	4601      	mov	r1, r0
 8004390:	428a      	cmp	r2, r1
 8004392:	d100      	bne.n	8004396 <memmove+0x2a>
 8004394:	bd10      	pop	{r4, pc}
 8004396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800439a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800439e:	e7f7      	b.n	8004390 <memmove+0x24>

080043a0 <_sbrk_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4d06      	ldr	r5, [pc, #24]	@ (80043bc <_sbrk_r+0x1c>)
 80043a4:	2300      	movs	r3, #0
 80043a6:	4604      	mov	r4, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	602b      	str	r3, [r5, #0]
 80043ac:	f7fc fe18 	bl	8000fe0 <_sbrk>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d102      	bne.n	80043ba <_sbrk_r+0x1a>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	b103      	cbz	r3, 80043ba <_sbrk_r+0x1a>
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	20000314 	.word	0x20000314

080043c0 <memcpy>:
 80043c0:	440a      	add	r2, r1
 80043c2:	4291      	cmp	r1, r2
 80043c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043c8:	d100      	bne.n	80043cc <memcpy+0xc>
 80043ca:	4770      	bx	lr
 80043cc:	b510      	push	{r4, lr}
 80043ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043d6:	4291      	cmp	r1, r2
 80043d8:	d1f9      	bne.n	80043ce <memcpy+0xe>
 80043da:	bd10      	pop	{r4, pc}

080043dc <_realloc_r>:
 80043dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e0:	4680      	mov	r8, r0
 80043e2:	4615      	mov	r5, r2
 80043e4:	460c      	mov	r4, r1
 80043e6:	b921      	cbnz	r1, 80043f2 <_realloc_r+0x16>
 80043e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ec:	4611      	mov	r1, r2
 80043ee:	f7ff bc4b 	b.w	8003c88 <_malloc_r>
 80043f2:	b92a      	cbnz	r2, 8004400 <_realloc_r+0x24>
 80043f4:	f7ff fbdc 	bl	8003bb0 <_free_r>
 80043f8:	2400      	movs	r4, #0
 80043fa:	4620      	mov	r0, r4
 80043fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004400:	f000 f81a 	bl	8004438 <_malloc_usable_size_r>
 8004404:	4285      	cmp	r5, r0
 8004406:	4606      	mov	r6, r0
 8004408:	d802      	bhi.n	8004410 <_realloc_r+0x34>
 800440a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800440e:	d8f4      	bhi.n	80043fa <_realloc_r+0x1e>
 8004410:	4629      	mov	r1, r5
 8004412:	4640      	mov	r0, r8
 8004414:	f7ff fc38 	bl	8003c88 <_malloc_r>
 8004418:	4607      	mov	r7, r0
 800441a:	2800      	cmp	r0, #0
 800441c:	d0ec      	beq.n	80043f8 <_realloc_r+0x1c>
 800441e:	42b5      	cmp	r5, r6
 8004420:	462a      	mov	r2, r5
 8004422:	4621      	mov	r1, r4
 8004424:	bf28      	it	cs
 8004426:	4632      	movcs	r2, r6
 8004428:	f7ff ffca 	bl	80043c0 <memcpy>
 800442c:	4621      	mov	r1, r4
 800442e:	4640      	mov	r0, r8
 8004430:	f7ff fbbe 	bl	8003bb0 <_free_r>
 8004434:	463c      	mov	r4, r7
 8004436:	e7e0      	b.n	80043fa <_realloc_r+0x1e>

08004438 <_malloc_usable_size_r>:
 8004438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443c:	1f18      	subs	r0, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	bfbc      	itt	lt
 8004442:	580b      	ldrlt	r3, [r1, r0]
 8004444:	18c0      	addlt	r0, r0, r3
 8004446:	4770      	bx	lr

08004448 <_init>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	bf00      	nop
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr

08004454 <_fini>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	bf00      	nop
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr
